// Consider all integer combinations of ab for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:
//     2^2=4,  2^3=8,   2^4=16,  2^5=32
//     3^2=9,  3^3=27,  3^4=81,  3^5=243
//     4^2=16, 4^3=64 , 4^4=256, 4^5=1024
//     5^2=25, 5^3=125, 5^4=625, 5^5=3125
// If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:
// 4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125
// How many distinct terms are in the sequence generated by ab for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?


#include <iostream>
#include <set>

#include "big_int.h"


std::set<BigInt> get_powers(int32_t maxA, int32_t maxB) {
    std::set<BigInt> ret;

    for (int32_t a = 2; a <= maxA; ++a) {
        for (int32_t b = 2; b <= maxB; ++b) {
            BigInt num{ a };
            for (int32_t i = 1; i < b; ++i) {
                num *= a;
            }
            ret.insert(num);
        }
    }
    return ret;
}


int main()
{
    std::cout << "Hello World!\n";

    auto powers = get_powers(5, 5);
    for (const auto& p : powers) {
        std::cout << p << std::endl;
    }

    powers = get_powers(100, 100);
    std::cout << "number of powers = " << powers.size() << std::endl;
}
