// There are some prime values, p, for which there exists a positive integer, n, such that the expression
//      n^3 + n^2 x p
// is a perfect cube.
//
// For example, when p = 9, 8^3 + 8^2 x 19 = 12^3
//
// What is perhaps most surprising is that for each prime with this property the value of
// n is unique, and there are only four such primes below one-hundred.
//
// How many primes below one-million have this remarkable property?


#include <iostream>
#include <unordered_set>
#include <vector>

#include "prime_helper.h"


// For a given max prime P, what is the maximum potential cube that can be the sum:
//   n^3 + P * n^2 = x^3

// Let x = n + k, then
//   n^3 + P * n^2 = (n + k)^3
//   n^3 + P * n^2 = n^3 + 3 * k * n^2 + 3 * k^2 * n + k^3
//   (3*k - P) * n^2 + 3*k^2 * n + k^3 = 0
// Quadratic solution:
//   A = (3*k - P)      B = 3*k^2       C = k^3
// n = (-3*k^2 +- sqrt(9*k^4 - 4*(3*k - P)*k^3)) / (6*k - 2*P)
// n = (-3*k^2 +- sqrt(9*k^4 - 12*k^4 + 4 * P * k^3)) / (6*k - 2*P)
// n = (-3*k^2 +- sqrt(4*P*k^3 - 3*k^4)) / (6*k - 2*P)

// If difference under the root is negative, then no real solutions, so:
//     4*P*k^3 - 3*k^4 >= 0
//     4*P - 3*k >= 0
//     k <= 4/3 P

// k = 4, P = 19:
//    n = (-3*16 +- sqrt(4*19*64 - 3*256)) / (24 - 38)
//    n = (-48 +- sqrt(4096)) / -14
//    n = (48 -+ 64) / 14
//    n = -16/14, 112/14
//    n = -8/7, 8



using P_N = std::pair<uint64_t, uint64_t>;


std::vector<P_N> find_primes_forward(uint64_t max_value) {
    std::vector<P_N> ret;

    PrimeHelper helper;

    auto primes = helper.get_primes(max_value);

    std::unordered_set<uint64_t> cubes;
    for (uint64_t num = 1; num < max_value * 10; ++num)
        cubes.insert(num * num * num);

    for (const auto& p : primes) {
        std::cout << p << std::endl;
        for (uint64_t n = 1; n < max_value * 200; ++n) {
            uint64_t sum = n * n * (n + p);
            uint64_t next_cube = (n + 1) * (n + 1) * (n + 1);
            if (cubes.find(sum) != cubes.end()) {
                ret.push_back({ p, n });
                break;
            }
            if (sum < next_cube)
                break;
        }
    }

    return ret;
}


std::vector<P_N> find_primes(uint64_t max_value) {
    std::vector<P_N> ret;

    PrimeHelper helper;

    auto primes = helper.get_primes(max_value);

    std::unordered_set<int64_t> squares;
    for (size_t i = 1; i < 4 * primes.back(); ++i)
        squares.insert(i * i);

    for (const auto& p : primes) {
        std::cout << p << "\t" << ret.size()  << std::endl;
        int64_t max_k = 4 * p / 3;
        for (int64_t k = 1; k <= max_k; ++k) {
            int64_t A = 3 * k - p;
            int64_t B = 3 * k * k;
            int64_t C = k * k * k;

            int64_t disc = 4 * p * k - 3 * k * k;
            if (disc < 0)
                break;

            // If the discriminant isn't a perfect square, we won't get an integer n
            if (squares.find(disc) == squares.end())
                continue;

            double n1 = (-B + k * sqrt(disc)) / (2 * A);
            double n2 = (-B - k * sqrt(disc)) / (2 * A);

            if ((n1 > 0) && (floor(n1) == n1)) {
                ret.push_back({ p, n1 });
                break;
            }
            else if ((n2 > 0) && (floor(n2) == n2)) {
                ret.push_back({ p, n2 });
                break;
            }
        }
    }

    return ret;
}


int main()
{
    std::cout << "Hello World!\n";

    //{
    //    auto primes = find_primes(100);
    //    for (const auto& [p, n] : primes)
    //        std::cout << p << "\t" << n << std::endl;
    //    std::cout << "There are " << primes.size() << " primes under 100 that have the property." << std::endl;
    //}
    //return 0;
    {
        auto primes = find_primes_forward(1'000'000);
        std::cout << "There are " << primes.size() << " primes under 1,000,000 that have the property:" << std::endl;
        for (const auto& [p, n] : primes)
            std::cout << p << "\t" << n << std::endl;
        std::cout << "There are " << primes.size() << " primes under 1,000,000 that have the property." << std::endl;
    }
}


// Quadratic:
//   P           n       cube root of sum
//      7           1           2
//     19           8          12
//     37          27          36
//     61          64          80
//    127         216         252
//    271         729         810
//    331        1000        1100
//    397        1331        1452
//    547        2197        2366
//    631        2744        2940
//    919        4913        5202
//   1657       12167       12696
//   1801       13824       14400
//   1951       15625       16250
//   2269       19683       20412
//   2437       21952       22736
//   2791       27000       27900
//   3169       32768       33792
//   3571       39304       40460
//   4219       50653       52022
//   4447       54872       56316
//   5167       68921       70602
//   5419       74088       75852
//   6211       91125       93150
//   7057      110592      112896
//   7351      117649      120050
//   8269      140608      143312
//   9241      166375      169400
//  10267      195112      198476
//  11719      238328      242172
//  12097      250047      254016
//  13267      287496      291852
//  13669      300763      305252
//  16651      405224      410700
//  19441      512000      518400
//  19927      531441      538002
//  22447      636056      643452
//  23497      681472      689216
//  24571      729000      737100
//  25117      753571      761852
//  26227      804357      813006
//  27361      857375      866400
//  33391     1157625     1168650
//  35317     1259712     1271376
//  42841     1685159     1699320
//  45757     1860867     1875996
//  47251     1953125     1968750
//  49537     2097152     2113536
//  50311     2146689     2163330
//  55897     2515456     2533952
//  59221     2744000     2763600
//  60919     2863288     2883452
//  65269     3176523     3198132
//  70687     3581577     3604986
//  73477     3796416     3820752
//  74419     3869893     3894542
//  75367     3944312     3969276
//  81181     4410944     4437840
//  82171     4492125     4519350
//  87211     4913000     4941900
//  88237     5000211     5029452
//  89269     5088448     5118032
//  92401     5359375     5390000
//  96661     5735339     5767380
// 102121     6229504     6263360
// 103231     6331625     6365850
// 104347     6434856     6469452
// 110017     6967871     7004352
// 112327     7189057     7226306
// 114661     7414875     7452900
// 115837     7529536     7567952
// 126691     8615125     8657150
// 129169     8869743     8912592
// 131671     9129329     9173010
// 135469     9528128     9573072
// 140617    10077696    10124352
// 144541    10503459    10551420
// 145861    10648000    10696400
// 151201    11239424    11289600
// 155269    11697083    11748612
// 163567    12649337    12703626
// 169219    13312053    13368222
// 170647    13481272    13537916
// 176419    14172488    14231052
// 180811    14706125    14766150
// 189757    15813251    15876252
// 200467    17173512    17240076
// 202021    17373979    17441060
// 213067    18821096    18891852
// 231019    21253933    21330662
// 234361    21717639    21795480
// 241117    22665187    22745276
// 246247    23393656    23475452
// 251431    24137569    24221090
// 260191    25412184    25498620
// 263737    25934336    26021952
// 267307    26463592    26552396
// 276337    27818127    27909936
// 279991    28372625    28465650
// 283669    28934443    29028692
// 285517    29218112    29312976
// 292969    30371328    30468672
// 296731    30959144    31057740
// 298621    31255875    31355100
// 310087    33076161    33179202
// 329677    36264691    36374252
// 333667    36926037    37036926
// 337681    37595375    37707600
// 347821    39304000    39419600
// 351919    40001688    40118652
// 360187    41421736    41541452
// 368551    42875000    42997500
// 372769    43614208    43738112
// 374887    43986977    44111586
// 377011    44361864    44487180
// 383419    45499293    45626742
// 387721    46268279    46397160
// 398581    48228544    48361040
// 407377    49836032    49971456
// 423001    52734375    52875000
// 436627    55306341    55451502
// 452797    58411072    58561616
// 459817    59776471    59929352
// 476407    63044792    63203196
// 478801    63521199    63680400
// 493291    66430125    66594150
// 522919    72511713    72685602
// 527941    73560059    73735620
// 553411    78953589    79137630
// 574219    83453453    83644422
// 584767    85766121    85960602
// 590077    86938307    87134556
// 592741    87528384    87725520
// 595411    88121125    88319150
// 603457    89915392    90116096
// 608851    91125000    91327500
// 611557    91733851    91937252
// 619711    93576664    93782780
// 627919    95443993    95652842
// 650071   100544625   100760850
// 658477   102503232   102722256
// 666937   104487111   104708952
// 689761   109902239   110131680
// 692641   110592000   110822400
// 698419   111980168   112212492
// 707131   114084125   114319350
// 733591   120553784   120797820
// 742519   122763473   123010482
// 760537   127263527   127516536
// 769627   129554216   129810252
// 772669   130323843   130580892
// 784897   133432831   133693952
// 791047   135005697   135268866
// 812761   140608000   140878400
// 825301   143877824   144152400
// 837937   147197952   147476736
// 847477   149721291   150003252
// 863497   153990656   154277952
// 879667   158340421   158633102
// 886177   160103007   160397856
// 895987   162771336   163069452
// 909151   166375000   166677500
// 915769   168196608   168501312
// 925741   170953875   171261900
// 929077   171879616   172188752
// 932419   172808693   173118942
// 939121   174676879   174989360
// 952597   178453547   178770516
// 972991   184220009   184543770
// 976411   185193000   185517900
// 986707   188132517   188460846
// 990151   189119224   189448700
// 997057   191102976   191434752
