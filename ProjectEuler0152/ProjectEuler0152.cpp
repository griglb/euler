// There are several ways to write the number 1/2 as a sum of square reciprocals
// using distinct integers.
//
// For instance, the numbers { 2, 3, 4, 5, 7, 12, 15, 20, 28, 35 } can be used:
//              1/2 = 1/2^2 + 1/3^2 + 1/4^2 + 1/5^2 + 1/7^2 + 1/12^2 +
//                    1/15^2 + 1/20^2 + 1/28^ + 1/35^2
//
// In fact, only using integers between 2 and 45 inclusive, there are exactly
// three ways to do it, the remaining two being:
//      { 2, 3, 4, 6, 7, 9, 10, 20, 28, 35, 36, 45 }
//      { 2, 3, 4, 6, 7, 9, 12, 15, 28, 30, 35, 36, 45 }
//
// How many ways are there to write 1/2 as a sum of reciprocals of squares using
// distinct integers between 2 and 80 inclusive?

//#ifdef WIN32
#define _CRT_SECURE_NO_WARNINGS
//#endif

#include <chrono>
#include <cstdint>
#include <ctime>   
#include <iostream>
#include <map>
#include <set>
#include <unordered_set>
#include <vector>

#include "combinatorics.h"
#include "fraction.h"
#include "gcd.h"


// If we include all reciprocal squares in [2, N], how many terms must be there?
// This is because sum - 1/n^2 < 1/2.
//      N         sum         required
//      2         1/4             2
//      3        13/36           2,3
//      4        61/144         2,3,4
//      5      1669/3600       2,3,4,5
//      6      1769/3600      2,3,4,5,6
//      7     90281/176400   2,3,4,5,6,7
//      8    372149/705600    2,3,4,5,6
//      9   3427741/6350400    2,3,4,5
//     10    698249/1270080     2,3,4
//     11  85758290/153679680   2,3,4
//     12  86825429/153679680    2,3
//
// This may seem counterintuitive, but up through N=6 the sum of reciprocal squares
// is less than 1/2.  The N=7 sum is the first time the sum is greater than 1/2, but
// less than 1/2 + 1/49.  Once we get to N=8, the sum is large enough to be less then
// 1/2 + 1/n^2 for some n<N.  We can see as N grows, the sum gets large enough to
// allow smaller values of n to be excluded from the set - for example N=12 is the
// first time the sum is greater than 1/2 + 1/16.
// Further sum analysis shows that N=30 is the firs time the sum allows exclusion of
// n=3, where the sum is greater than 1/2 + 1/9.
// The sum for N=8 is still ~0.63, which is less than 1/2 + 1/4, so n=2 is the only
// value that is required to be part of the solution set.
//

// As the 3 solutions for N=45 show, we can keep most of the set the same and swap out
// a small subset of values for a similarly sized subset of new values.
// Here are all the subsets with equivalent reciprocal square sums:
//      { 4 }               { 5, 7, 28, 35 }            1/16
//      { 6 }               { 7, 14, 21 }               1/36
//      { 8 }               { 12, 15, 20, 24 }          1/64
//      { 12 }              { 15, 20 }                  1/144
//      { 12 }              { 14, 28, 42 }              1/144
//      { 24 }              { 30, 40 }                  1/576
//
//      { 3, 20 }           { 4, 5, 10, 30 }            409/360
//      { 5, 36 }           { 6, 10, 20, 45 }           1321/32400
//      { 5, 40 }           { 6, 10, 24, 30 }           13/320
//      { 6, 7 }            { 5, 14, 21, 35 }           85/1764
//      { 8, 15 }           { 10, 12, 20, 40 }          289/14400
//      { 10, 20 }          { 12, 15, 30 }              1/80
//      { 15, 20 }          { 14, 28, 42 }              1/144
//
//      { 3, 20, 40 }       { 4, 5, 10, 24 }            329/2880
//      { 3, 28, 42 }       { 4, 6, 7, 21 }             797/7056
//      { 3, 30, 36 }       { 4, 5, 10, 45 }            3661/3240
//      { 4, 10, 45 }       { 5, 6, 15, 36 }            473/6480
//      { 4, 14, 21 }       { 5, 6, 28, 35 }            493/7056
//      { 4, 14, 42 }       { 5, 7, 12, 35 ]            481/7056
//      { 4, 20, 40 }       { 5, 8, 10 }                21/320
//      { 5, 6, 36 }        { 4, 15, 30, 45 }           2221/32400
//      { 5, 15, 36 }       { 6, 10, 12, 45 }           293/6480
//      { 5, 20, 45 }       { 6, 10, 15, 36 }           1393/32400
//      { 5, 24, 30 }       { 6, 10, 15, 40 }           617/14400
//      { 5, 28, 35 }       { 6, 12, 14, 21 ]           33/784
//      { 6, 8, 45 }        { 5, 20, 36, 40 }           5689/129600
//      { 6, 28, 42 }       { 7, 12, 21 }               209/7056
//      { 6, 28, 42 }       { 7, 15, 20, 21 }           209/7056
//      { 6, 40, 45 }       { 8, 10, 20, 36 }           749/25920
//      { 7, 28, 35 }       { 10, 12, 15, 30 }          9/400
//      { 8, 15, 30 }       { 10, 20, 20, 24 }          61/2880
//      { 9, 36, 45 }       { 10, 20, 30 }              49/3600
//      { 10, 30, 36 }      { 12, 15, 45 }              77/6480
//      { 15, 36, 40 }      { 20, 24, 30, 45 }          757/129600
//      { 20, 40, 45 }      { 24, 30, 36 }              469/129600
//
//      { 3, 12, 14, 42 }   { 4, 5, 7, 35 }             97/784
//      { 4, 10, 20, 45 }   { 5, 6, 12, 36 }            1223/16200
//      { 4, 10, 24, 30 }   { 5, 6, 12, 40 }            217/2880
//      { 4, 12, 20, 36 }   { 5, 6, 15, 45 }            489/8100
//      { 4, 12, 30, 45 }   { 5, 6, 20, 36 }            1151/16200
//      { 4, 15, 24, 45 }   { 5, 6, 36, 40 }            1793/25920
//      { 4, 24, 28, 42 }   { 6, 7, 8, 21 }             1865/28224
//      { 5, 10, 15, 30 }   { 6, 7, 14, 21 }            1/18
//      { 5, 10, 24, 30 }   { 6, 8, 12, 20 }            761/14400
//      { 5, 10, 40, 45 }   { 6, 8, 12, 36 }            265/5184
//      { 5, 12, 21, 35 }   { 6, 7, 28, 42 }            353/7056
//      { 5, 12, 36, 40 }   { 6, 8, 15, 45 }            1253/25920
//      { 5, 14, 15, 42 }   { 6, 7, 30, 35 }            221/4410
//      { 5, 15, 24, 45 }   { 6, 8, 20, 36 }            6049/129600
//      { 5, 15, 36, 45 }   { 6, 9, 18, 20 }            1481/32400
//      { 5, 20, 24, 30 }   { 6, 10, 12, 40 }           53/14400
//      { 5, 20, 24, 36 }   { 6, 8, 30, 45 }            5833/129600
//      { 6, 14, 21, 35 }   { 7, 10, 15, 30 }           793/22050
//      { 6, 15, 24, 30 }   { 8, 10, 12, 20 }           101/2880
//      { 6, 15, 40, 45 }   { 8, 10, 12, 36 }           4321/129600
//      { 7, 28, 30, 35 }   { 9, 10, 36, 45 }           17/720
//      { 7, 28, 35, 40 }   { 10, 12, 15, 24 }          37/1600
//      { 10, 28, 35, 45 }  { 14, 15, 21, 36 }          19981/1587600
//


/*
1 / 2304  : { 48, } { 60, 80, }
1 / 1296 : { 36, } { 45, 60, }
501 / 313600 : { 35, 40, 80, } { 42, 48, 56, 60, }
1 / 576 : { 24, } { 30, 40, } { 36, 45, 60, 72, }
12289 / 6350400 : { 35, 40, 45, } { 36, 42, 56, 60, }
2125 / 1016064 : { 35, 40, 45, 80, } { 36, 42, 48, 56, }
6077 / 2822400 : { 30, 42, 56, 80, } { 35, 40, 48, 60, }
107 / 47040 : { 30, 42, 56, 60, } { 35, 36, 45, 72, }
15817 / 6350400 : { 30, 42, 45, 56, } { 35, 36, 40, 60, }
1 / 324 : { 18, } { 21, 42, 63, }
437 / 141120 : { 20, 56, 60, } { 21, 40, 70, }
1 / 320 : { 20, 40, } { 24, 30, 60, }
13 / 3920 : { 20, 35, } { 21, 42, 60, 70, }
49 / 14400 : { 20, 40, 60, } { 21, 35, 56, }
1781 / 518400 : { 18, 72, 80, } { 24, 36, 45, 48, }
1089 / 313600 : { 20, 35, 80, } { 21, 42, 48, 70, }
1133 / 317520 : { 18, 60, 70, } { 20, 35, 63, }
517 / 141120 : { 24, 30, 35, } { 20, 42, 56, 60, } { 21, 40, 42, 70, }
6049 / 1587600 : { 20, 35, 45, } { 21, 36, 42, 70, }
10781 / 2822400 : { 20, 42, 48, 56, } { 24, 30, 35, 80, }
1 / 256 : { 16, } { 24, 30, 40, 48, }
4973 / 1270080 : { 18, 40, 70, } { 24, 30, 35, 63, }
26401 / 6350400 : { 20, 36, 42, 56, } { 24, 30, 35, 45, }
12317 / 2822400 : { 20, 30, 48, 56, } { 21, 24, 70, 80, }
569 / 129600 : { 18, 30, 72, } { 20, 36, 40, 45, }
97 / 22050 : { 18, 42, 45, 63, } { 21, 30, 35, 70, }
41 / 8820 : { 15, 70, } { 18, 35, 45, 63, }
29857 / 6350400 : { 20, 30, 36, 56, } { 21, 24, 45, 70, }
869 / 176400 : { 15, 60, 70, } { 18, 35, 36, 63, } { 21, 28, 35, 42, }
701 / 141120 : { 15, 56, 70, } { 20, 28, 40, 42, }
289 / 57600 : { 16, 30, } { 20, 24, 40, 80, }
14473 / 2822400 : { 16, 40, 56, 60, } { 20, 21, 70, 80, }
2681 / 518400 : { 16, 36, 45, } { 18, 24, 72, 80, }
8221 / 1587600 : { 18, 28, 35, } { 15, 60, 63, 70, }
61 / 11520 : { 16, 30, 60, } { 20, 24, 40, 48, }
3761 / 705600 : { 15, 42, 56, } { 20, 24, 35, 60, }
27101 / 5080320 : { 15, 48, 63, 70, } { 18, 28, 35, 80, }
77 / 14400 : { 15, 40, 60, } { 20, 24, 30, }
85 / 15876 : { 14, 63, } { 18, 21, }
15289 / 2822400 : { 15, 35, 80, } { 16, 40, 42, 56, }
113 / 20736 : { 16, 36, 45, 60, } { 18, 24, 48, 72, }
3097 / 564480 : { 15, 42, 56, 80, } { 20, 24, 35, 48, }
977 / 176400 : { 15, 35, 60, } { 20, 21, 42, 70, }
197 / 35280 : { 14, 60, 70, } { 20, 21, 35, }
9 / 1600 : { 14, 56, 70, } { 20, 24, 30, 60, }
1801 / 317520 : { 15, 36, 63, 70, } { 18, 28, 35, 45, }
37 / 6400 : { 14, 56, 70, 80, } { 15, 40, 48, 60, } { 20, 24, 30, 48, }
9193 / 1587600 : { 18, 20, 70, } { 15, 35, 60, 63, }
7397 / 1270080 : { 15, 42, 45, 56, } { 20, 24, 35, 36, }
93 / 15680 : { 14, 40, 70, } { 21, 24, 30, 35, }
151057 / 25401600 : { 15, 35, 48, 63, } { 18, 20, 70, 80, }
4289 / 705600 : { 15, 30, 56, 70, } { 20, 24, 28, 42, }
793 / 129600 : { 14, 45, 56, 70, } { 15, 36, 40, 60, } { 20, 24, 30, 36, }
3 / 490 : { 14, 35, 70, } { 15, 30, 42, }
38977 / 6350400 : { 15, 35, 40, 63, } { 18, 24, 30, 70, }
389 / 62720 : { 14, 40, 56, 80, } { 16, 28, 35, 70, }
361 / 57600 : { 16, 24, 40, } { 15, 30, 48, 60, }
9977 / 1587600 : { 15, 35, 36, 63, } { 18, 20, 45, 70, }
5 / 784 : { 14, 28, } { 18, 21, 36, 63, }
229 / 35280 : { 14, 30, 60, } { 15, 28, 42, 70, }
737 / 112896 : { 15, 30, 35, 80, } { 16, 24, 42, 56, }
3757 / 564480 : { 15, 24, 56, 80, } { 16, 21, 60, 70, }
701 / 103680 : { 15, 30, 36, 48, } { 16, 24, 40, 45, }
1 / 144 : { 12, } { 15, 20, } { 13, 39, 52, } { 14, 28, 42, }
19961 / 2822400 : { 15, 21, 70, 80, } { 16, 24, 30, 56, }
141 / 19600 : { 14, 28, 35, } { 15, 21, 60, 70, }
1865 / 254016 : { 14, 28, 36, 72, } { 18, 21, 24, 63, }
461 / 62720 : { 14, 28, 35, 80, } { 15, 21, 48, 70, } { 16, 20, 40, 56, }
1349 / 176400 : { 14, 21, 60, } { 15, 28, 30, 35, }
1219 / 158760 : { 12, 60, 63, 70, } { 18, 20, 28, 35, }
2441 / 317520 : { 14, 28, 35, 45, } { 15, 21, 36, 70, }
153 / 19600 : { 14, 20, 70, } { 15, 21, 35, 60, }
2497 / 313600 : { 14, 20, 70, 80, } { 15, 21, 35, 48, }
3113 / 389376 : { 12, 39, 65, 80, } { 13, 26, 48, 78, }
1907 / 235200 : { 12, 42, 56, 60, } { 15, 24, 30, 35, }
5753 / 705600 : { 14, 24, 30, 70, } { 15, 21, 35, 40, }
41501 / 5080320 : { 12, 35, 63, 80, } { 15, 18, 48, 70, }
5837 / 705600 : { 14, 21, 40, 60, } { 15, 24, 28, 35, }
13177 / 1587600 : { 14, 20, 45, 70, } { 15, 21, 35, 36, }
1825 / 219024 : { 12, 39, 45, 65, } { 13, 26, 36, 78, }
2701 / 317520 : { 12, 35, 45, 63, } { 15, 18, 36, 70, }
407 / 47040 : { 12, 30, 56, 60, } { 15, 21, 24, 70, }
101 / 11520 : { 12, 30, 48, 60, } { 16, 20, 24, 40, }
229 / 25920 : { 12, 36, 40, 45, } { 15, 18, 30, 72, }
793 / 88200 : { 12, 28, 42, 70, } { 14, 20, 30, 60, }
109 / 11520 : { 15, 16, 30, } { 12, 24, 40, 80, }
19 / 1960 : { 12, 21, 60, 70, } { 14, 20, 28, 35, }
187 / 19200 : { 12, 24, 40, 48, } { 15, 16, 30, 60, }
179 / 17640 : { 12, 28, 30, 35, } { 14, 20, 21, 60, }
13 / 1280 : { 10, 80, } { 12, 20, 48, 60, }
2585 / 254016 : { 12, 21, 36, 72, } { 14, 18, 24, 63, }
5749 / 564480 : { 12, 21, 35, 80, } { 14, 15, 48, 70, }
5 / 484 : { 10, 55, } { 11, 22, }
83 / 7938 : { 10, 63, 70, } { 14, 18, 21, }
17 / 1620 : { 10, 45, } { 12, 20, 36, 60, }
3341 / 317520 : { 12, 21, 35, 45, } { 14, 15, 36, 70, }
33 / 3136 : { 10, 56, 70, } { 12, 24, 28, 42, }
233 / 22050 : { 10, 42, } { 14, 15, 35, 70, }
5521 / 518400 : { 10, 45, 80, } { 12, 20, 36, 48, }
617 / 57600 : { 10, 48, 60, } { 12, 20, 30, 80, } { 15, 16, 24, 40, }
7681 / 705600 : { 10, 42, 56, } { 12, 20, 35, 40, }
179 / 16200 : { 10, 36, 60, } { 12, 20, 30, 45, }
3481 / 313600 : { 10, 40, 56, 80, } { 14, 16, 28, 35, }
653 / 57600 : { 10, 40, 48, 60, } { 12, 20, 24, 80, }
18013 / 1587600 : { 10, 35, 60, 63, } { 12, 18, 30, 70, }
11 / 960 : { 10, 36, 45, 72, } { 12, 20, 24, 60, }
1513 / 129600 : { 10, 36, 40, 60, } { 12, 20, 24, 45, }
1693 / 141120 : { 10, 30, 42, 56, } { 12, 20, 24, 35, }
913 / 76050 : { 10, 30, 39, 65, } { 13, 15, 26, 78, }
237 / 19600 : { 10, 28, 35, } { 14, 15, 21, 60, }
3841 / 313600 : { 10, 28, 35, 80, } { 14, 15, 21, 48, }
65 / 5184 : { 9, 72, } { 12, 18, 24, 36, }
3217 / 254016 : { 9, 56, } { 10, 21, 70, 72, }
361 / 28224 : { 9, 63, 72, } { 10, 21, 56, 70, }
1457 / 112896 : { 10, 21, 48, 70, } { 12, 16, 24, 56, }
1681 / 129600 : { 9, 40, } { 10, 20, 60, 72, }
1361 / 103680 : { 9, 40, 80, } { 10, 20, 48, 72, }
761 / 57600 : { 10, 20, 48, 60, } { 12, 16, 24, 40, }
2357 / 176400 : { 10, 21, 35, 60, } { 12, 14, 30, 70, }
349 / 25920 : { 9, 40, 45, } { 10, 20, 36, 72, }
3425 / 254016 : { 9, 42, 56, 63, } { 10, 18, 70, 72, }
85789 / 6350400 : { 9, 42, 56, 60, } { 10, 20, 35, 72, }
2809 / 198450 : { 9, 30, 45, 70, } { 10, 18, 35, 63, }
401 / 28224 : { 10, 21, 24, 70, } { 12, 15, 20, 56, }
7481 / 518400 : { 9, 24, 72, 80, } { 12, 16, 18, 45, }
3685 / 254016 : { 9, 28, 42, 56, } { 12, 14, 21, 72, }
925 / 63504 : { 10, 18, 28, 70, } { 12, 14, 21, 63, }
143 / 9800 : { 10, 20, 28, 35, } { 12, 14, 21, 60, }
305 / 20736 : { 9, 24, 48, 72, } { 12, 16, 18, 36, }
53 / 3600 : { 10, 15, 60, } { 9, 30, 36, 45, }
7669 / 518400 : { 9, 24, 48, 60, } { 10, 15, 72, 80, }
425 / 28224 : { 9, 21, 63, 72, } { 12, 14, 24, 28, }
1961 / 129600 : { 9, 24, 36, 60, } { 10, 15, 45, 72, }
397 / 25920 : { 9, 20, 60, 72, } { 10, 18, 24, 45, }
3937 / 254016 : { 9, 21, 42, 56, } { 10, 14, 70, 72, }
1 / 64 : { 8, } { 9, 18, 72, } { 10, 14, 56, 70, } { 12, 15, 20, 24, }
509 / 32400 : { 9, 18, 60, } { 10, 15, 36, 45, }
41 / 2592 : { 8, 72, } { 9, 24, 30, 40, }
337 / 20736 : { 9, 16, } { 8, 48, 72, } { 8, 60, 72, 80, }
941 / 57600 : { 8, 48, 60, } { 10, 15, 24, 80, }
21 / 1280 : { 8, 40, 80, } { 10, 16, 20, } { 12, 15, 16, 30, }
2161 / 129600 : { 8, 36, 60, } { 10, 15, 24, 45, }
21829 / 1270080 : { 8, 35, 45, 63, } { 9, 15, 70, 72, }
223 / 12960 : { 8, 30, 60, 72, } { 9, 20, 24, 40, }
8981 / 518400 : { 8, 36, 45, 48, } { 9, 18, 24, 80, }
2257 / 129600 : { 9, 15, 40, } { 10, 12, 60, 72, }
493 / 28224 : { 8, 28, 42, } { 10, 12, 56, 70, }
9109 / 518400 : { 9, 15, 40, 80, } { 10, 12, 48, 72, }
12581 / 705600 : { 8, 30, 35, 60, } { 10, 12, 42, 56, }
2321 / 129600 : { 9, 15, 40, 45, } { 10, 12, 36, 72, }
281 / 15680 : { 8, 28, 35, 70, } { 10, 14, 20, 56, }
12697 / 705600 : { 8, 28, 35, 60, } { 10, 14, 21, 40, }
589 / 32400 : { 8, 24, 40, 72, } { 9, 15, 30, 60, }
59 / 3240 : { 9, 18, 20, 60, } { 10, 12, 36, 45, }
2593 / 141120 : { 8, 21, 60, 70, } { 10, 12, 30, 56, }
1073 / 57600 : { 8, 24, 30, 80, } { 10, 15, 16, 60, }
217 / 11520 : { 8, 20, 48, 60, } { 10, 12, 24, 80, }
4805 / 254016 : { 8, 21, 36, 63, } { 9, 14, 28, 72, }
497 / 25920 : { 8, 20, 36, 60, } { 10, 12, 24, 45, }
509 / 25920 : { 9, 15, 24, 30, } { 10, 12, 20, 72, }
409 / 20736 : { 8, 16, 72, } { 9, 12, 48, } { 9, 12, 60, 80, } { 9, 15, 20, 48, }
3173 / 154880 : { 8, 16, 40, 55, } { 10, 11, 22, 80, }
65 / 3136 : { 7, 56, } { 8, 14, } { 9, 14, 18, 72, }
5297 / 254016 : { 7, 63, 72, } { 9, 14, 18, 56, }
1217 / 57600 : { 8, 15, 40, 48, } { 10, 12, 16, 60, }
137 / 6480 : { 7, 60, 63, 70, } { 10, 12, 18, 30, }
557 / 25920 : { 7, 40, 63, 70, } { 8, 18, 20, 60, }
1241 / 57600 : { 8, 16, 24, 60, } { 10, 12, 15, 80, }
5557 / 254016 : { 7, 28, 72, } { 9, 12, 21, 56, }
253 / 11520 : { 8, 15, 24, 80, } { 10, 12, 16, 30, }
157 / 7056 : { 7, 28, 42, } { 10, 12, 14, 70, }
3989 / 176400 : { 7, 30, 35, 60, } { 10, 12, 14, 42, }
29 / 1280 : { 7, 28, 35, 80, } { 8, 16, 20, 40, }
221 / 9680 : { 7, 28, 35, 55, } { 10, 11, 20, 22, }
5809 / 254016 : { 7, 21, 72, } { 9, 10, 56, 70, }
817 / 35280 : { 7, 21, 60, 70, } { 10, 12, 14, 30, }
613 / 25920 : { 8, 15, 18, 45, } { 9, 10, 30, 72, }
97 / 4050 : { 7, 18, 63, 70, } { 9, 10, 30, 45, }
81 / 3136 : { 7, 14, 56, } { 8, 10, 70, }
169 / 6400 : { 7, 16, 28, 35, } { 8, 10, 40, 80, }
329 / 11520 : { 6, 40, 80, } { 8, 10, 20, 48, }
227 / 7938 : { 6, 42, 63, } { 7, 14, 18, }
113 / 3920 : { 6, 42, 60, 70, } { 7, 14, 20, 35, }
2269 / 78400 : { 6, 42, 56, 60, } { 8, 10, 20, 35, }
1153 / 39690 : { 6, 35, 63, 70, } { 7, 15, 18, 30, }
1741 / 57600 : { 6, 24, 48, 60, } { 8, 10, 15, 80, }
857 / 28224 : { 6, 21, 56, } { 7, 12, 24, 28, }
3961 / 129600 : { 6, 24, 36, 60, } { 8, 10, 15, 45, }
3 / 98 : { 6, 21, 42, } { 7, 10, 70, }
137 / 4410 : { 6, 21, 35, 70, } { 7, 14, 15, 30, }
1 / 32 : { 6, 24, 30, 40, } { 8, 9, 18, 72, }
665 / 20736 : { 6, 18, 36, 48, } { 8, 9, 16, 72, }
13 / 400 : { 6, 15, 60, } { 7, 10, 28, 35, }
473 / 14400 : { 6, 15, 40, } { 8, 10, 12, 60, }
29 / 882 : { 6, 14, } { 7, 10, 21, 70, }
1901 / 57600 : { 6, 15, 40, 80, } { 8, 10, 12, 48, }
937 / 28224 : { 6, 14, 56, } { 7, 9, 63, 72, }
733 / 22050 : { 6, 15, 35, 70, } { 7, 10, 21, 42, }
661 / 19600 : { 6, 14, 42, 60, } { 7, 10, 20, 35, }
9217 / 254016 : { 7, 8, 63, } { 6, 14, 18, 56, }
4153 / 112896 : { 6, 14, 16, } { 7, 8, 48, 56, }
117 / 3136 : { 7, 8, 28, } { 6, 12, 21, 56, }
1081 / 28224 : { 7, 8, 21, } { 6, 10, 56, 70, }
505 / 12544 : { 6, 12, 14, 48, } { 7, 8, 16, 56, }
29 / 720 : { 5, 60, } { 6, 10, 20, } { 6, 12, 15, 30, }
28789 / 705600 : { 5, 56, 60, 70, } { 7, 8, 20, 21, }
4241 / 103680 : { 5, 48, 60, 72, } { 6, 9, 40, 80, }
10417 / 254016 : { 5, 35, 72, } { 6, 9, 42, 56, }
163 / 3969 : { 5, 35, 63, } { 6, 10, 18, 70, }
129 / 3136 : { 5, 35, 56, } { 7, 8, 14, }
1069 / 25920 : { 5, 36, 60, 72, } { 6, 9, 40, 45, }
17 / 400 : { 5, 20, } { 6, 10, 15, 60, }
273 / 6400 : { 5, 20, 80, } { 6, 10, 15, 48, }
493 / 11520 : { 5, 24, 40, 48, } { 6, 10, 16, 30, }
5569 / 129600 : { 5, 20, 60, 72, } { 6, 9, 24, 30, }
949 / 22050 : { 5, 21, 42, 70, } { 6, 10, 15, 35, }
19 / 441 : { 5, 21, 35, } { 6, 10, 14, 70, }
2509 / 57600 : { 6, 8, 80, } { 5, 20, 40, 48, }
641 / 14400 : { 6, 8, 30, } { 5, 20, 24, 60, }
2573 / 57600 : { 5, 20, 24, 48, } { 6, 8, 30, 80, }
4637 / 103680 : { 5, 16, 40, 72, } { 6, 9, 15, 80, }
2609 / 57600 : { 5, 16, 30, 60, } { 6, 8, 24, 80, }
6397 / 141120 : { 5, 15, 42, 56, } { 6, 8, 30, 35, }
32369 / 705600 : { 5, 15, 30, 56, } { 6, 8, 21, 70, }
145 / 3136 : { 5, 14, 35, 56, } { 6, 8, 21, 42, } { 7, 8, 10, 70, }
2669 / 57600 : { 5, 15, 24, 80, } { 6, 8, 20, 48, }
689 / 14400 : { 6, 8, 15, } { 5, 12, 40, 60, }
553 / 11520 : { 5, 12, 40, 48, } { 6, 8, 15, 80, }
197 / 4050 : { 5, 15, 18, 30, } { 6, 7, 63, 70, }
47 / 960 : { 5, 12, 24, 60, } { 6, 8, 15, 30, }
389 / 7938 : { 5, 14, 18, 35, } { 6, 7, 42, 63, }
181 / 3600 : { 5, 10, 60, } { 6, 7, 28, 35, }
81 / 1600 : { 5, 10, 40, } { 6, 8, 12, 60, }
1117 / 22050 : { 5, 14, 15, 30, } { 6, 7, 21, 70, }
13 / 256 : { 5, 10, 40, 80, } { 6, 8, 12, 48, }
5 / 98 : { 5, 10, 35, 70, } { 6, 7, 21, 42, }
233 / 4410 : { 5, 10, 21, 42, } { 6, 7, 15, 70, }
325 / 5184 : { 4, 72, } { 6, 8, 9, 12, }
8161 / 129600 : { 4, 60, 72, } { 5, 9, 10, 40, }
8933 / 141120 : { 4, 56, 60, 70, } { 5, 7, 21, 40, }
1789 / 28224 : { 4, 42, 56, } { 5, 8, 12, 35, }
20249 / 317520 : { 4, 35, 63, 70, } { 5, 7, 18, 60, }
1661 / 25920 : { 4, 30, 60, 72, } { 5, 9, 10, 24, }
1837 / 28224 : { 4, 21, 56, } { 6, 7, 8, 28, }
2321 / 35280 : { 4, 21, 35, 70, } { 5, 7, 14, 60, }
1037 / 15680 : { 4, 20, 35, 56, } { 5, 7, 14, 40, }
193 / 2880 : { 4, 20, 24, 60, } { 5, 8, 12, 15, }
49 / 720 : { 4, 15, 30, } { 5, 6, 60, }
109 / 1600 : { 4, 14, 56, 70, } { 5, 8, 10, 20, }
793 / 11520 : { 4, 15, 24, 80, } { 5, 6, 40, 48, }
1985 / 28224 : { 4, 12, 42, 56, } { 5, 6, 24, 35, }
12469 / 176400 : { 4, 14, 21, 35, } { 5, 7, 10, 60, }
4073 / 57600 : { 4, 12, 30, 80, } { 5, 6, 20, 48, }
13 / 180 : { 5, 6, 15, } { 4, 12, 20, 60, }
4169 / 57600 : { 4, 12, 20, 48, } { 5, 6, 15, 80, }
29 / 400 : { 4, 10, } { 5, 6, 15, 60, }
93 / 1280 : { 4, 10, 80, } { 5, 6, 15, 48, }
481 / 6400 : { 4, 10, 20, 80, } { 5, 6, 12, 48, }
139 / 1800 : { 4, 10, 15, 60, } { 5, 6, 12, 20, }
1129 / 14400 : { 4, 8, 60, } { 5, 6, 10, 40, }
229 / 2880 : { 4, 8, 30, 60, } { 5, 6, 10, 24, }
9 / 80 : { 3, 30, 60, } { 4, 5, 10, }
41 / 360 : { 3, 20, 60, } { 4, 5, 12, 15, }
341 / 2880 : { 3, 15, 24, 30, } { 4, 5, 8, 60, }
373 / 3136 : { 3, 12, 42, 56, } { 4, 5, 8, 35, }
47 / 360 : { 3, 10, 12, 20, } { 4, 5, 6, 60, }
*/

using Value = int64_t;
using Solution = std::set<Value>;
using AllSolutions = std::vector<Solution>;


const Fraction one_half{ 1, 2 };


Fraction get_sum(const Solution& values) {
    Fraction ret{ 0, 1 };

    for (const auto &val: values) {
        ret += Fraction{ 1, val * val };
    }

    return ret;
}


std::vector<std::unordered_set<Value>> shared_divisors(Value max_value) {
    std::vector<std::unordered_set<Value>> ret;

    ret.push_back({}); // 0 has no common divisors with any other number
    ret.push_back({}); // 1 has no common divisors with any other number

    for (Value val = 2; val <= max_value; ++val) {
        std::unordered_set<Value> common_divisors;
        for (Value other = 2; other <= max_value; ++other) {
            if (other == val)
                continue;

            if (gcd(val, other) > 1)
                common_divisors.insert(other);
        }
        ret.emplace_back(common_divisors);
    }

    return ret;
}


std::map<Fraction, AllSolutions> get_small_sums(Value max_value) {
    std::map<Fraction, AllSolutions> ret;

    auto pairs = get_combinations(max_value + 1, 2);
    auto triplets = get_combinations(max_value + 1, 3);
    auto quads = get_combinations(max_value + 1, 4);

    for (Value v = 2; v <= max_value; ++v) {
        Fraction sum{ 1, v * v };
        if (ret.find(sum) == ret.cend())
            ret[sum] = {};
        ret[sum].push_back({ v });
    }

    for (const auto& p : pairs) {
        if (1 >= *p.begin())
            continue;
        Solution s{ p.begin(), p.end() };
        auto sum = get_sum(s);
        if (ret.find(sum) == ret.cend())
            ret[sum] = {};
        ret[sum].push_back(s);
    }

    for (const auto& t : triplets) {
        if (1 >= *t.begin())
            continue;
        Solution s{ t.begin(), t.end() };
        auto sum = get_sum(s);
        if (ret.find(sum) == ret.cend())
            ret[sum] = {};
        ret[sum].push_back(s);
    }

    for (const auto& q : quads) {
        if (1 >= *q.begin())
            continue;
        Solution s{ q.begin(), q.end() };
        auto sum = get_sum(s);
        if (ret.find(sum) == ret.cend())
            ret[sum] = {};
        ret[sum].push_back(s);
    }

    return ret;
}


AllSolutions test_remove_n(const Solution& curr_set, const Fraction &curr_sum, Value to_remove) {
    Fraction test_sum{ curr_sum };
    test_sum -= Fraction{ 1, to_remove * to_remove };
    if (test_sum < one_half)
        return {};

    Solution test_set{ curr_set };
    test_set.erase(to_remove);

    AllSolutions ret;
    if (test_sum == one_half) {
        std::cout << "Found solution: { ";
        for (const auto& el : test_set)
            std::cout << el << ", ";
        std::cout << " }" << std::endl;
        return { test_set };
    }

    for (const auto& val : test_set) {
        // Skip values less than the test value, they have already been tested.
        if (val < to_remove)
            continue;

        AllSolutions sub_solutions = test_remove_n(test_set, test_sum, val);
        for (const auto& sol : sub_solutions)
            ret.push_back(sol);
    }

    return ret;
}


AllSolutions solve(Value max_value) {
    AllSolutions ret;

    Solution all_values;
    Fraction sum{ 0, 1 };
    for (Value val = 2; val <= max_value; ++val) {
        all_values.insert(val);
        sum += Fraction{ 1, val * val };
    }

    std::cout << "Sum = " << sum << std::endl;

    for (Value val = max_value; val >= 2; --val) {
        auto now = std::chrono::system_clock::now();
        std::time_t now_time = std::chrono::system_clock::to_time_t(now);
        std::cout << "Testing removal of " << val << " at " << std::ctime(&now_time) << std::endl;

        AllSolutions sub_solutions = test_remove_n(all_values, sum, val);
        for (const auto& sol : sub_solutions)
            ret.push_back(sol);
    }

    return ret;
}


int main()
{
    std::cout << "Hello World!\n";

    {
        std::cout << get_sum({ 2, 3, 4, 5,    7,        12, 15, 20, 28,     35 }) << std::endl;
        std::cout << get_sum({ 2, 3, 4,    6, 7, 9, 10,         20, 28,     35, 36, 45 }) << std::endl;
        std::cout << get_sum({ 2, 3, 4,    6, 7, 9,     12, 15,     28, 30, 35, 36, 45 }) << std::endl;

        std::cout << get_sum({ 3, 12, 15 }) << std::endl;
        std::cout << get_sum({ 7, 28, 35 }) << std::endl;
        std::cout << get_sum({ 9, 36, 45 }) << std::endl;
        std::cout << get_sum({ 3,  7, 12, 15, 28, 35 }) << std::endl;
        std::cout << get_sum({ 7,  9, 28, 35, 36, 45 }) << std::endl;
        std::cout << get_sum({ 3,  7,  9, 12, 15, 28, 35, 36, 45 }) << std::endl;

        std::cout << get_sum({ 4, 5, 20 }) << std::endl;
        std::cout << get_sum({ 4, 10, 20 }) << std::endl;

    }

    {
        auto sums = get_small_sums(80);
        for (const auto& [sum, sols] : sums) {
            if (sols.size() == 1)
                continue;

            // only print out sums where the solution sets are disjoint
            auto sol1 = sols[0];
            bool disjoint{ true };
            for (size_t i = 1; i < sols.size(); ++i) {
                auto soln = sols[i];
                for (const auto& el : sol1) {
                    if (soln.find(el) != soln.cend())
                        disjoint = false;
                }
            }
            if (!disjoint)
                continue;

            // only print sums where at least one element is >45
            bool has_big{ false };
            for (const auto sol : sols) {
                for (const auto& el : sol) {
                    if (el > 45)
                        has_big = true;
                }
            }
            if (!has_big)
                continue;

            std::cout << sum << "\t: ";
            for (const auto sol : sols) {
                std::cout << "{ ";
                for (const auto& el : sol)
                    std::cout << el << ", ";
                std::cout << "}\t";
            }
            std::cout << std::endl;
        }
    }
    return 0;
    {
        auto shared = shared_divisors(80);
        for (size_t ind = 0; ind < shared.size(); ++ind) {
            std::cout << ind << " :\t";
            for (const auto val : shared[ind])
                std::cout << val << ", ";
            std::cout << std::endl;
        }
    }
    return 0;
    {
        auto sols = solve(45);
        for (const auto sol : sols) {
            for (const auto& el : sol)
                std::cout << el << ", ";
            std::cout << std::endl;
        }
    }
}
