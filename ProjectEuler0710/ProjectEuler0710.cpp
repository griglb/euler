// On Sunday 5 April 2020 the Project Euler membership first exceeded one million members.
// We would like to present this problem to celebrate that milestone.
// Thank you to everyone for being a part of Project Euler.
//
// The number 6 can be written as a palindromic sum in exactly eight different ways:
//      (1, 1, 1, 1, 1, 1), (1, 1, 2, 1, 1), (1, 2, 2, 1), (1, 4, 1), (2, 1, 1, 2), (2, 2, 2), (3, 3), (6)
//
// We shall define a twopal to be a palindromic tuple having at least one element with a value of 2.
// It should also be noted that elements are not restricted to single digits.
// For example, (3, 2, 13, 6, 13, 2, 3) is a valid twopal.
//
// If we let t(n) be the number of twopals whose elements sum to n, then it can be seen that t(6) = 4:
//              (1, 1, 2, 1, 1), (1, 2, 2, 1), (2, 1, 1, 2), (2, 2, 2)
//
// Similarly, t(20) = 824.
//
// In searching for the answer to the ultimate question of life, the universe, and everything, it can be
// verified that t(42) = 1999923, which happens to be the first value of t(n) that exceeds one million.
//
// However, your challenge to the "ultimatest" question of life, the universe, and everything is to find
// the least value of n > 42 such that is divisible by one million.


#include <algorithm>
#include <cmath>
#include <cstdint>
#include <iostream>
#include <numeric>
#include <set>
#include <vector>

#include "gcd.h"
#include "prime_helper.h"


// The first question is whether n is odd or even.  If n is odd, then all the palindromic sets must have
// an odd number of elements, with the middle number being odd.  So for odd n, the twopals all have an odd
// central number and matching pairs of 2s in the two symmetric halves.
// When n is even, on the other hand, there will be a set of twopals that have 2 as the central number and
// then all the various sets of numbers that sum to n/2 - 1.  This is in addition to all the even sized
// sets, where each half sums to n/2..

// Let's start by enumerating the sets that contribute to t(n) to look for patterns:
//      t(1) = 0  -  {}
//      t(2) = 1  -  {2}
//      t(3) = 0  -  {}
//      t(4) = 2  -  {1, 2, 1}, {2, 2}
//      t(5) = 1  -  {2, 1, 2}
//      t(6) = 4  -  {1, 1, 2, 1, 1}, {2, 2, 2}, {1, 2, 2, 1}, {2, 1, 1, 2}
//      t(7) = 3  -  {1, 2, 1, 2, 1}, {2, 1, 1, 1, 2}, {2, 3, 2}
//      t(8) = 9  -  {1, 1, 1, 2, 1, 1, 1}, {1, 2, 2, 2, 1}, {2, 1, 2, 1, 2}, {3, 2, 3},
//                   {1, 1, 2, 2, 1, 1}, {1, 2, 1, 1, 2, 1}, {2, 1, 1, 1, 1 ,2},
//                   {2, 2, 2, 2}, {2, 4, 2}
//      t(9) = 7  -  {2, 2, 1, 2, 2}, {1, 1, 2, 1, 2, 1, 1}, {1, 2, 1, 1, 1, 2, 1}, {2, 1, 1, 1, 1, 1, 2},
//                   {1, 2, 3, 2, 1}, {2, 1, 3, 1, 2}, {2, 5, 2}
//     t(10) = 20 -  {1, 1, 1, 1, 2, 1, 1, 1, 1}, {1, 1, 2, 2, 2, 1, 1}, {1, 2, 1, 2, 1, 2, 1}, {2, 1, 1, 2, 1, 1, 2},
//                   {2, 2, 2, 2, 2}, {1, 3, 2, 3, 1}, {3, 1, 2, 1, 3}, {4, 2, 4},
//                   {1, 2, 4, 2, 1}, {2, 1, 4, 1, 2}, {2, 6, 2},
//                   {1, 1, 1, 2, 2, 1, 1, 1}, {1, 1, 2, 1, 1, 2, 1, 1}, {1, 2, 1, 1, 1, 1, 2, 1}, {2, 1, 1, 1, 1, 1, 1, 2},
//                   {1, 2, 2, 2, 2, 1}, {2, 1, 2, 2, 1, 2}, {2, 2, 1, 1, 2, 2},
//                   {3, 2, 2, 3}, {2, 3, 3, 2}
//     t(11) = 16 -  {3, 2, 1, 2, 3}, {2, 3, 1, 3, 2},
//                   {1, 2, 2, 1, 2, 2, 1}, {2, 1, 2, 1, 2, 1, 2}, {2, 2, 1, 1, 1, 2, 2},
//                   {1, 1, 1, 2, 1, 2, 1, 1, 1}, {1, 1, 2, 1, 1, 1, 2, 1, 1}, {1, 2, 1, 1, 1, 1, 1, 2, 1}, {2, 1, 1, 1, 1, 1, 1, 1, 2},
//                   {2, 2, 3, 2, 2}, {1, 1, 2, 3, 2, 1, 1}, {1, 2, 1, 3, 1, 2, 1}, {2, 1, 1, 3, 1, 1, 2},
//                   {1, 2, 5, 2, 1}, {2, 1, 5, 1, 2},
//                   {2, 7, 2}
//
// We can see a few recursion patterns to generate the sets for t(n) from t(n-2):
//      - insert matching 1's in any position of the halves
//      - add 1 to symmetric elements in each half
//
// To demonstrate, here's how to generate t(6) from t(4):
//      {2, 2} -> {1, 2, 2, 1}, {2, 1, 1, 2}
//      {1, 2, 1} -> {1, 1, 2, 1, 1}, {1, 1, 2, 1, 1}, {2, 2, 2}
//
// Next, generate t(8) from t(6):
//      {1, 1, 2, 1, 1} -> {1, 1, 1, 2, 1, 1, 1}, {1, 1, 1, 2, 1, 1, 1}, {1, 1, 1, 2, 1, 1, 1}, {2, 1, 2, 1, 2}, {1, 2, 2, 2, 1}
//      {1, 2, 2, 1} -> {1, 1, 2, 2, 1, 1}, {1, 1, 2, 2, 1, 1}, {1, 2, 1, 1, 2, 1}, {2, 2, 2, 2}
//      {2, 1, 1, 2} -> {1, 2, 1, 1, 2, 1}, {2, 1, 1, 1, 1 ,2}, {2, 2, 2, 2}
//      {2, 2, 2} -> {1, 2, 2, 2, 1}, {2, 1, 2, 1, 2}, {3, 2, 3}, {2, 4, 2}
//
// This works, but it doesn't scale well and requires a lot of bookkeeping.  For example, you have to know
// that when {2, 1, 1, 2} has the 2s augmented that it is no longer a twopal as {3, 1, 1, 3}.
// A more closed form expression is needed.

// Let's go back to the rules for the even and odd values of n.  When n is odd, the twopals have an
// odd cardinality and the middle value in the set k must be odd.  When n is even, the twopals can
// have an even number of elements.  In both of these cases, we know the two symmetric halves must
// contain at least one 2, so all we need to do is count these sets.
// Define S(x) the number of sets of natural numbers that sum to x and have at least one 2.
// Define P(x) the number of sets of natural numbers that sum to x.
// Then we know that:
//      t(n) = S((n-1)/2) + S((n-3)/2 + S((n-5)/2) + ... + S(2)             for odd n
//      t(n) = S(n/2) + P((n-2)/2) + S((n-4)/2) + S((n-6)/2) + ... + S(2)   for even n
//
// Let's examine S(n) and P(n):
//      S(1) = 0
//      S(2) = 1  -  {2}
//      S(3) = 2  -  {1, 2}, {2, 1}
//      S(4) = 4  -  {1, 1, 2}, {1, 2, 1}, {2, 1, 1},
//                   {2, 2}
//      S(5) = 9  -  {1, 1, 1, 2}, {1, 1, 2, 1}, {1, 2, 1, 1}, {2, 1, 1, 1},
//                   {1, 2, 2}, {2, 1, 2}, {2, 2, 1},
//                   {2, 3}, {3, 2}
//      S(6) = 20 -  {1, 1, 1, 1, 2}, {1, 1, 1, 2, 1}, {1, 1, 2, 1, 1}, {1, 2, 1, 1, 1}, {2, 1, 1, 1, 1},
//                   {1, 1, 2, 2}, {1, 2, 1, 2}, {1, 2, 2, 1}, {2, 1, 1, 2}, {2, 1, 2, 1}, {2, 2, 1, 1},
//                   {2, 2, 2},
//                   {1, 2, 3}, {1, 3, 2}, {2, 1, 3}, {2, 3, 1}, {3, 1, 2}, {3, 2, 1},
//                   {2, 4}, {4, 2}
//
//      P(1) = 1  -  {1}
//      P(2) = 2  -  {1, 1}, {2}
//      P(3) = 4  -  {1, 1, 1}, {1, 2}, {2, 1}, {3}
//      P(4) = 8  -  {1, 1, 1, 1},
//                   {1, 1, 2}, {1, 2, 1}, {2, 1, 1},
//                   {1, 3}, {3, 1},
//                   {2, 2},
//                   {4}
//      P(5) = 16 -  {1, 1, 1, 1, 1},
//                   {1, 1, 1, 2}, {1, 1, 2, 1}, {1, 2, 1, 1}, {2, 1, 1, 1},
//                   {1, 2, 2}, {2, 1, 2}, {2, 2, 1},
//                   {1, 1, 3}, {1, 3, 1}, {3, 1, 1},
//                   {1, 4}, {4, 1},
//                   {2, 3}, {3, 2},
//                   {5}
//      P(6) = 32 -  {1, 1, 1, 1, 1, 1},
//                   {1, 1, 1, 1, 2}, {1, 1, 1, 2, 1}, {1, 1, 2, 1, 1}, {1, 2, 1, 1, 1}, {2, 1, 1, 1, 1},
//                   {1, 1, 2, 2}, {1, 2, 1, 2}, {1, 2, 2, 1}, {2, 1, 1, 2}, {2, 1, 2, 1}, {2, 2, 1, 1},
//                   {1, 1, 1, 3}, {1, 1, 3, 1}, {1, 3, 1, 1}, {3, 1, 1, 1},
//                   {1, 2, 3}, {1, 3, 2}, {2, 1, 3}, {2, 3, 1}, {3, 1, 2}, {3, 2, 1},
//                   {1, 1, 4}, {1, 4, 1}, {4, 1, 1},
//                   {2, 2, 2},
//                   {1, 5}, {5, 1},
//                   {2, 4}, {4, 2},
//                   {3, 3},
//                   {6}
//
// The P(n) function looks like it evaluates to P(n) = 2^(n-1).
// We can prove this by construction. For each set in P(n-1), we can construct 2 unique sets in P(n):
//      - add a 1 to the set at the end
//      - increment the last element of the set by 1
// This shows that P(n) = 2 * P(n-1), QED
//
// The S(n) function is more complicated.  We can see how the set of sets is a subset of the corresponding
// set of sets for P(n), but we have to filter out those that don't contain any 2s.

// Going back to the expression for t(n), let's see if we can show t(6) = 4.
// 6 is even so we use that form:
//      t(n) = S(n/2) + P((n-2)/2) + S((n-4)/2) + S((n-6)/2) + ... + S(2)   for even n
//      t(6) = S(3) + P(2)
//      t(6) = 2 + 2 = 4
// We can see this from the sets too:
// For S(3) we have {1, 2}, {2, 1}, which create the even sized palindromes {1, 2, 2, 1}, {2, 1, 1, 2}.
// For P(2) we have {1, 1}, {2}, which create the odd sized palindromes {1, 1, 2, 1, 1}, {2, 2, 2}.
// The union of those sets of sets is identical to the full set for t(6).

// Next let's see if we can show t(20) = 824.
// 20 is even so we use that form:
//      t(n) = S(n/2) + P((n-2)/2) + S((n-4)/2) + S((n-6)/2) + ... + S(2)   for even n
//      t(20) = S(10) + P(9) + S(8) + S(7) + S(6) + S(5) + S(4) + S(3) + S(2)
// We've already calculated S(n) up to 6, and know P(9) = 2^8 = 256, so the missing pieces are S(10),
// S(8), and S(7). We know S(10) counts a subset of the sets that P(10) does, and P(10) = 2^9 = 512.
// Let's brute force it and enumerate the sets for S(7), S(8), and S(10):
//      S(7) =  43 -   {1, 1, 1, 1, 1, 2}           = 6!/5!     =   6
//                     {1, 1, 1, 2, 2}              = 5!/3!/2!  =   10
//                     {1, 2, 2, 2}                 = 4!/3!     =   4
//                     {1, 1, 2, 3}                 = 4!/2!     =   12
//                     {2, 2, 3}                    = 3!/2!     =   3
//                     {1, 2, 4}                    = 3!        =   6
//                     {2, 5}                       = 2!        =   2
//
//      S(8) =  91 -   {1, 1, 1, 1, 1, 1, 2}        = 7!/6!     =   7
//                     {1, 1, 1, 1, 2, 2}           = 6!/4!/2!  =   15
//                     {1, 1, 2, 2, 2}              = 5!/3!/2!  =   10
//                     {2, 2, 2, 2}                 = 4!/4!     =   1
//                     {1, 1, 1, 2, 3}              = 5!/3!     =   20
//                     {1, 2, 2, 3}                 = 4!/2!     =   12
//                     {1, 1, 2, 4}                 = 4!/2!     =   12
//                     {2, 2, 4}                    = 3!/2!     =   3
//                     {1, 2, 5}                    = 3!        =   6
//                     {2, 6}                       = 2!        =   2
//                     {2, 3, 3}                    = 3!/2!     =   3
//
//      S(9) = 191 -   {1, 1, 1, 1, 1, 1, 1, 2}     = 8!/7!     =   8
//                     {1, 1, 1, 1, 1, 2, 2}        = 7!/5!/2!  =   21
//                     {1, 1, 1, 2, 2, 2}           = 6!/3!/3!  =   20
//                     {1, 2, 2, 2, 2}              = 5!/4!     =   5
//                     {1, 1, 1, 1, 2, 3}           = 6!/4!     =   30
//                     {1, 1, 2, 2, 3}              = 5!/2!/2!  =   30
//                     {2, 2, 2, 3}                 = 4!/3!     =   4
//                     {1, 1, 1, 2, 4}              = 5!/3!     =   20
//                     {1, 2, 2, 4}                 = 4!/2!     =   12
//                     {1, 1, 2, 5}                 = 4!/2!     =   12
//                     {2, 2, 5}                    = 3!/2!     =   3
//                     {1, 2, 6}                    = 3!        =   6
//                     {2, 7}                       = 2!        =   2
//                     {1, 2, 3, 3}                 = 4!/2!     =   12
//                     {2, 3, 4}                    = 3!        =   6
// 
//      S(10) = 398 -  {1, 1, 1, 1, 1, 1, 1, 1, 2}  = 9!/8!     =   9
//                     {1, 1, 1, 1, 1, 1, 2, 2}     = 8!/6!/2!  =   28
//                     {1, 1, 1, 1, 2, 2, 2}        = 7!/4!/3!  =   35
//                     {1, 1, 2, 2, 2, 2}           = 6!/2!/4!  =   15
//                     {2, 2, 2, 2, 2}              = 5!/5!     =   1
//                     {1, 1, 1, 1, 1, 2, 3}        = 7!/5!     =   42
//                     {1, 1, 1, 2, 2, 3}           = 6!/3!/2!  =   60
//                     {1, 2, 2, 2, 3}              = 5!/3!     =   20
//                     {1, 1, 1, 1, 2, 4}           = 6!/4!     =   30
//                     {1, 1, 2, 2, 4}              = 5!/2!/2!  =   30
//                     {2, 2, 2, 4}                 = 4!/3!     =   4
//                     {1, 1, 1, 2, 5}              = 5!/3!     =   20
//                     {1, 2, 2, 5}                 = 4!/2!     =   12
//                     {1, 1, 2, 6}                 = 4!/2!     =   12
//                     {2, 2, 6}                    = 3!/2!     =   3
//                     {1, 2, 7}                    = 3!        =   6
//                     {2, 8}                       = 2!        =   2
//                     {1, 1, 2, 3, 3}              = 5!/2!/2!  =   30
//                     {2, 2, 3, 3}                 = 4!/2!/2!  =   6
//                     {1, 2, 3, 4}                 = 4!        =   24
//                     {2, 3, 5}                    = 3!        =   6
//                     {2, 4, 4}                    = 3!/2!     =   3
//
//      t(20) = S(10) + P(9) + S(8) + S(7) + S(6) + S(5) + S(4) + S(3) + S(2)
//      t(20) = 398 + 256 + 91 + 43 + 20 + 9 + 4 + 2 + 1 = 824 QED


// Look at sets with 2,3
//  n   num     comb                    sets
//  5    2      2!/0!/1!                {2,3}
//  6    6      3!/1!/1!                {1,2,3}
//  7   15      4!/2!/1! + 3!/0!/2!
//  8   32      5!/3!/1! + 4!/1!/2!
//  9   64      6!/4!/1! + 5!/2!/2! + 4!/0!/3!
// 10  122      7!/5!/1! + 6!/3!/2! + 5!/1!/3!
//

//  n   S(n)
//  1    0
//  2    1      1!/0!/1!
//  3    2      2!/1!/1!
//  4    4      3!/2!/1! + 2!/0!/2!
//  5    9      4!/3!/1! + 3!/1!/2!                                     | 2!/0!/1!/1!
//  6   20      5!/4!/1! + 4!/2!/2! + 3!/0!/3!                          | 3!/1!/1!/1!                               | 2!/0!/1!/1!                               |
//  7   43      6!/5!/1! + 5!/3!/2! + 4!/1!/3!                          | 4!/2!/1!/1! + 3!/0!/2!/1!                 | 3!/1!/1!/1!                               | 2!/0!/1!/1!
//  8   91      7!/6!/1! + 6!/4!/2! + 5!/2!/3! + 4!/0!/4!               | 5!/3!/1!/1! + 4!/1!/2!/1!                 | 4!/2!/1!/1! + 3!/0!/2!/1!                 | 3!/1!/1!/1!
//  9  191      8!/7!/1! + 7!/5!/2! + 6!/3!/3! + 5!/1!/4!               | 6!/4!/1!/1! + 5!/2!/2!/1! + 4!/0!/3!/1!   | 5!/3!/1!/1! + 4!/1!/2!/1!                 | 4!/2!/1!/1! + 3!/0!/2!/1! |
// 10  398      9!/8!/1! + 8!/6!/2! + 7!/4!/3! + 6!/2!/4! + 5!/0!/5!    | 7!/5!/1!/1! + 6!/3!/2!/1! + 5!/1!/3!/1!   | 6!/4!/1!/1! + 5!/2!/2!/1! + 4!/0!/3!/1!   | 5!/3!/1!/1! + 4!/1!/2!/1! |
//
//  n   S(n)
//  1    0
//  2    1      1
//  3    2      2
//  4    4      3 +  1
//  5    9      4 +  3                  |  2
//  6   20      5 +  6 +  1             |  6                |  2
//  7   43      6 + 10 +  4             | 12 +   3          |  6            |  2
//  8   91      7 + 15 + 10 +  1        | 20 +  12          | 12 +  3       |  6            |  2        |           |       |       |  3
//  9  191      8 + 21 + 20 +  5        | 30 +  30 +  4     | 20 + 12       | 12 +  3       |  6        | 2         |       |       | 12        |  6        |
// 10  398      9 + 28 + 35 + 15 + 1    | 42 +  60 + 20     | 30 + 30 +  4  | 20 + 12       | 12 +  3   | 6         | 2     |       | 30 + 6    | 24        |  6    |       |  3
// 11  820     10 + 36 + 56 + 35 + 6    | 56 + 105 + 60 + 5 | 42 + 60 + 20  | 30 + 30 + 4   | 20 + 12   | 12 + 3    | 6     | 2     | 60 + 30   | 60 + 12   | 24    | 6     | 12    | 6
//                  {1,2}                   {2,3}               {2,4}          {2,5}          {2,6}      {2,7}      {2,8}    {2,9}   {2,3,3}     {2,3,4}     {2,3,5} {2,3,6} {2,4,4} {2,4,5}

// Rearrange the previous section a little, based on the number of unique terms:
//  n           {1,2}
//  2     1
//  3     2
//  4     3 +   1
//  5     4 +   3
//  6     5 +   6 +    1
//  7     6 +  10 +    4
//  8     7 +  15 +   10 +    1
//  9     8 +  21 +   20 +    5
// 10     9 +  28 +   35 +   15 +     1
// 11    10 +  36 +   56 +   35 +     6
// 12    11 +  45 +   84 +   70 +    21 +     1
// 13    12 +  55 +  120 +  126 +    56 +     7
// 14    13 +  66 +  165 +  210 +   126 +    28 +     1
// 15    14 +  78 +  220 +  330 +   252 +    84 +     8
// 16    15 +  91 +  286 +  495 +   462 +   210 +    36 +    1
// 17    16 + 105 +  364 +  715 +   792 +   462 +   120 +    9
// 18    17 + 120 +  455 + 1001 +  1287 +   924 +   330 +   45 +   1
// 19    18 + 136 +  560 + 1365 +  2002 +  1716 +   792 +  165 +  10
// 20    19 + 153 +  680 + 1820 +  3003 +  3003 +  1716 +  495 +  55 +  1
// 21    20 + 171 +  816 + 2380 +  4368 +  5005 +  3432 + 1287 + 220 + 11
//
//  n               {1,2,3}                                                       {1,2,4}                       {1,2,5}         {1,2,6}      {1,2,7}     {1,2,8}    {1,2,9} {1,2,10}
//  5           2                                                          |                               |               |               |           |           |       |
//  6           6                                                          |   2                           |               |               |           |           |       |
//  7          12 +    3                                                   |   6                           |  2            |               |           |           |       |
//  8          20 +   12                                                   |  12 +    3                    |  6            |  2            |           |           |       |
//  9          30 +   30 +     4                                            |  20 +   12                    | 12 +  3       |  6            |  2        |           |       |
// 10          42 +   60 +    20                                            |  30 +   30 +    4             | 20 + 12       | 12 +  3       |  6        |  2        |       |
// 11          56 +  105 +    60 +     5                                    |  42 +   60 +   20             | 30 + 30 +  4  | 20 + 12       | 12 +  3   |  6        |  2    |
// 12          72 +  168 +   140 +    30                                    |  56 +  105 +   60 +     5     | 42 + 60 + 20  | 30 + 30 + 4   | 20 + 12   | 12 + 3    |  6    | 2
// 13          90 +  252 +   280 +   105 +     6                            |  72 +  168 +  140 +    30     |
// 14         110 +  360 +   504 +   280 +    42                            |  90 +  252 +  280 +   105 +   6 |
// 15         132 +  495 +   840 +   630 +   168 +     7                    | 110 +  360 +  504 +   280
// 16         156 +  660 +  1320 +  1260 +   504 +    56                    |
// 17         182 +  858 +  1980 +  2310 +  1260 +   252 +    8             |
// 18         210 + 1092 +  2860 +  3910 +  2772 +   840 +   72             |
// 19         240 + 1365 +  4004 +  6435 +  5544 +  2310 +  360 +   9       |
// 20         272 + 1680 +  5460 + 10010 + 10296 +  5544 + 1320 +  90       |
// 21         306 + 2040 +  7280 + 15015 + 18018 + 12012 + 3960 + 495 + 10  |
//
//  n                {1,2,3,3}                                          {1,2,4,4}                                   {1,2,5,5}
//  8                  3                                              |                                           |
//  9                 12                                              |                                           |
// 10                 30 +     6                                      |    3                                      |
// 11                 60 +    30                                      |   12                                      |
// 12                105 +    90 +    10                              |   30 +    6                               |
// 13                168 +   210 +    60                              |   60 +   30                               |
// 14                252 +   420 +   210 +    15                      |  105 +   90 +   10                        |
// 15                360 +   756 +   560 +   105                      |  168 +  210 +   60                        |
// 16                495 +  1260 +  1260 +   420 +    21              |  252 +  420 +  210 +   15                 |
// 17                660 +  1980 +  2520 +  1260 +   168              |  360 +  756 +  560 +  105                 |
// 18                858 +  2970 +  4620 +  3150 +   756 +   28       |  495 + 1260 + 1260 +  420 +   21          |
// 19               1092 +  4290 +  7920 +  6930 +  2520 +  252       |  660 + 1980 + 2520 + 1260 +  168          |
// 20               1365 +  6006 + 12870 + 13860 +  6930 + 1260 +  36 |  858 + 2970 + 4620 + 3150 +  756 +  28    |
// 21               1680 +  8190 + 20020 + 25740 + 16632 + 4620 + 360 | 1092 + 4290 + 7920 + 6930 + 2520 + 252    |
//
//  n                {1,2,3,4}                                        {1,2,3,5}   {1,2,3,6}   {1,2,4,5}
//  9                  6                                             |           |           |
// 10                 24                                             |  6        |           |
// 11                 60 +    12                                     | 24        |  6        |  6
// 12                120 +    60                                     | 60 + 12   | 24        | 24
// 13                210 +   180 +    20                             |
// 14                336 +   420 +   120                             |
// 15                504 +   840 +   420 +    30                     |
// 16                720 +  1512 +  1120 +   210                     |
// 17                990 +  2520 +  2520 +   840 +    42             |
// 18               1320 +  3960 +  5040 +  2520 +   336             |
// 19               1716 +  5940 +  9240 +  6300 +  1512 +   56      |
// 20               2184 +  8580 + 15840 + 13860 +  5040 +  504      |
// 21               2730 + 12012 + 25740 + 27720 + 13860 + 2520 + 72 |
//
// We can see that the first table is easy to construct.  The first column is just increasing ordinals.
// Each subsequent column is the running total of the previous column.
//
// The other tables are constructed by starting at a certain column in the first table and multiplying
// each column by a scale factor.
// Let us look at these scale factors:
//      for {1,2,p} they are 2, 3, 4, 5, 6, 7, 8, 9, 10, ...
//      for {1,2,p,p} they are 3, 6, 10, 15, 21, 28, 36, ...
//      for {1,2,p,q} they are 6, 12, 20, 30, 42, 56, 72, ...
// The scale factors correspond to different numbers of 2's in the set.
// So it appears that if the cardinalities of the numbers are x 2's, y p's, z q's, ... then
// the scale factor is (x+y+z)!/x!/y!/z!
//      For {1,2,p}, we have x=1,2,3,...; y=1; z=0.
//        The scale factors are 2!/1!, 3!/2!, 4!/3!, 5!/4!, ...
//        This is also C(2,1), C(3,1), C(4,1), C(5,1), ...
//      For {1,2,p,p}, we have x=1,2,3,...; y=2; z=0.
//        The scale factors are 3!/1!/2!, 4!/2!/2!, 5!/3!/2!, 6!/4!/2!, ...
//        This is also C(3,2), C(4,2), C(5,2), C(6,2), ...
//      For {1,2,p,q}, we have x=1,2,3,...; y=1; z=1.
//        The scale factors are 3!/1!/1!/1!, 4!/2!/1!/1!, 5!/3!/1!/1!, 6!/4!/1!/1!, ...

// Now compare the sets that each S(n) has to count:
//  n       sets
//  1       {}
//  2       {2}
//  3       {1,2}
//  4       {1,1,2}, {2,2}
//  5       {1,1,1,2}, {1,2,2}, {2,3}
//  6       {1,1,1,1,2}, {1,1,2,2}, {2,2,2}, {1,2,3}, {2,4}
//  7       {1,1,1,1,1,2}, {1,1,1,2,2}, {1,2,2,2}, {1,1,2,3}, {2,2,3}, {1,2,4}, {2,5}
//  8       {1,1,1,1,1,1,2}, {1,1,1,1,2,2}, {1,1,2,2,2}, {2,2,2,2}, {1,1,1,2,3}, {1,2,2,3},
//          {2,3,3}, {1,1,2,4}, {2,2,4}, {1,2,5}, {2,6}
//  9       {1,1,1,1,1,1,1,2}, {1,1,1,1,1,2,2}, {1,1,1,2,2,2}, {1,2,2,2,2}, {1,1,1,1,2,3},
//          {1,1,2,2,3}, {2,2,2,3}, {1,2,3,3}, {1,1,1,2,4}, {1,2,2,4}, {1,1,2,5}, {2,2,5},
//          {1,2,6}, {2,7}, {2,3,4}
// 10       {1,1,1,1,1,1,1,1,2}, {1,1,1,1,1,1,2,2}, {1,1,1,1,2,2,2}, {1,1,2,2,2,2}, {2,2,2,2,2},
//          {1,1,1,1,1,2,3}, {1,1,1,2,2,3}, {1,2,2,2,3}, {1,1,2,3,3}, {2,2,3,3}, {1,1,1,1,2,4},
//          {1,1,2,2,4}, {2,2,2,4}, {1,1,1,2,5}, {1,2,2,5}, {1,1,2,6}, {2,2,6}, {1,2,7}, {2,8},
//          {1,2,3,4}, {2,3,5}
//
// We will set aside the sets with only 1's and 2's for now, and focus on the larger terms.
// In this context, the sets being counted are:
//  n       sets
//  1       {}
//  2       {}
//  3       {}
//  4       {}
//  5       {2,3}
//  6       {1,2,3}, {2,4}
//  7       {1,1,2,3}, {2,2,3}, {1,2,4}, {2,5}
//  8       {1,1,1,2,3}, {1,2,2,3}, {1,1,2,4}, {2,2,4}, {1,2,5}, {2,6}
//          {2,3,3},
//  9       {1,1,1,1,2,3}, {1,1,2,2,3}, {2,2,2,3},
//          {1,1,1,2,4}, {1,2,2,4}, {1,1,2,5}, {2,2,5}, {1,2,6}, {2,7},
//          {1,2,3,3}, {2,3,4}
// 10       {1,1,1,1,1,2,3}, {1,1,1,2,2,3}, {1,2,2,2,3},
//          {1,1,2,3,3}, {2,2,3,3},
//          {1,1,1,1,2,4}, {1,1,2,2,4}, {2,2,2,4},
//          {1,1,1,2,5}, {1,2,2,5}, {1,1,2,6}, {2,2,6}, {1,2,7}, {2,8},
//          {1,2,3,4}, {2,3,5}
//
// We can see certain sets that exist in each n, with a increment of the largest term:
//      {2,3} -> {2,4} -> {2,5} -> {2,6} -> {2,7} -> {2,8}
//      {1,2,3} -> {1,2,4} -> {1,2,5} -> {1,2,6} -> {1,2,7}
//      {1,1,2,3} -> {1,1,24} -> {1,1,2,5} -> {1,1,2,6}
//
// So let's look at the new sets that have to be counted for (n+1) that don't exist for n:
//  n       sets
//  1       {}
//  2       {}
//  3       {}
//  4       {}
//  5       {2,3}
//  6       {1,2,3}
//  7       {1,1,2,3}, {2,2,3}
//  8       {1,1,1,2,3}, {1,2,2,3}, {2,3,3},
//  9       {1,1,1,1,2,3}, {1,1,2,2,3}, {2,2,2,3},
//          {1,2,3,3}, {2,3,4}*
// 10       {1,1,1,1,1,2,3}, {1,1,1,2,2,3}, {1,2,2,2,3},
//          {1,1,2,3,3}, {2,2,3,3}, {1,2,3,4}*
//
// The asterisked sets are similar to a set in the previous n, but don't match exactly:
//      {2,3,3} -/> {2,3,4}
//      {1,2,3,3} -/> {1,2,3,4}
//

// S(10) - 2,8
//         1,2,7
//         1,1,2,6          2,2,6
//         1,1,1,2,5        1,2,2,5
//         1,1,1,1,2,4      1,1,2,2,4       2,2,2,4
//         1,1,1,1,1,2,3    1,1,1,2,2,3     1,2,2,2,3
//         2,3,5
//         2,4,4
//         2,2,3,3
//         2,2,2,2,2
//

// S(21) - 2,19
//         2,2,17
//         2,3,16
//         2,4,15   2,2,2,15
//         2,5,14   2,2,3,14
//         2,6,13   2,2,4,13   2,3,3,13
//         2,7,12   2,2,5,12   2,3,4,12   2,2,2,3,12
//         2,8,11   2,2,6,11   2,3,5,11   2,2,2,4,11   2,2,2,2,2,11
//         2,9,10   2,2,7,10   2,3,6,10   2,2,2,5,10   2,2,2,2,3,10   2,6,6,7
//

// n    S(n)  {1,2}   3^1    4^1    5^1    6^1    7^1    8^1    3^2   {3,4}  {3,5}   4^2
//  0    0      0      0      0      0      0      0      0      0      0      0      0
//  1    0      0      0      0      0      0      0      0      0      0      0      0
//  2    1      1      0      0      0      0      0      0      0      0      0      0
//  3    2      2      0      0      0      0      0      0      0      0      0      0
//  4    4      4      0      0      0      0      0      0      0      0      0      0
//  5    9      7      2      0      0      0      0      0      0      0      0      0
//  6   20     12      6      2      0      0      0      0      0      0      0      0
//  7   43     20     15      6      2      0      0      0      0      0      0      0
//  8   91     33     32     15      6      2      0      0      3      0      0      0
//  9  191     54     64     32     15      6      2      0     12      6      0      0
// 10  398     88    122     64     32     15      6      2     36     24      6      3

// Break up the {1,2} by number of 2s
//  n   2^1    2^2    2^3    2^4    2^5
//  0    0      0      0      0      0
//  1    0      0      0      0      0
//  2    1      0      0      0      0
//  3    2      0      0      0      0
//  4    3      1      0      0      0
//  5    4      3      0      0      0
//  6    5      6      1      0      0
//  7    6     10      4      0      0
//  8    7     15     10      1      0
//  9    8     21     20      5      0
// 10    9     28     35     15      1

//                                  1
//                                1   1
//                              1   2   1
//                            1   3   3   1
//                          1   4   6   4   1
//                        1   5  10  10   5   1
//                      1   6  15  20  15   6   1
//                    1   7  21  35  35  21   7   1
//                  1   8  28  56  70  56  28   8   1
//                1   9  36  84 126 126  84  36   9   1
//

//      S(7) =  43 -   {1, 1, 1, 1, 1, 2}           = 6!/5!     =   6
//                     {1, 1, 1, 2, 2}              = 5!/3!/2!  =   10
//                     {1, 2, 2, 2}                 = 4!/3!     =   4
//      S(8) =  91 -   {1, 1, 1, 1, 1, 1, 2}        = 7!/6!     =   7
//                     {1, 1, 1, 1, 2, 2}           = 6!/4!/2!  =   15
//                     {1, 1, 2, 2, 2}              = 5!/2!/3!  =   10
//                     {2, 2, 2, 2}                 = 4!/4!     =   1
//      S(9) = 191 -   {1, 1, 1, 1, 1, 1, 1, 2}     = 8!/7!     =   8
//                     {1, 1, 1, 1, 1, 2, 2}        = 7!/5!/2!  =   21
//                     {1, 1, 1, 2, 2, 2}           = 6!/3!/3!  =   20
//                     {1, 2, 2, 2, 2}              = 5!/4!     =   5
//      S(10) = 398 -  {1, 1, 1, 1, 1, 1, 1, 1, 2}  = 9!/8!     =   9
//                     {1, 1, 1, 1, 1, 1, 2, 2}     = 8!/6!/2!  =   28
//                     {1, 1, 1, 1, 2, 2, 2}        = 7!/4!/3!  =   35
//                     {1, 1, 2, 2, 2, 2}           = 6!/2!/4!  =   15
//                     {2, 2, 2, 2, 2}              = 5!/5!     =   1
//
// In S(9),  8!/7!    =  8 =  7 +  1 = 7!/6!    + 1
//           7!/5!/2! = 21 = 15 +  6 = 6!/4!/2! + 6!/5!
//           6!/3!/3! = 20 = 10 + 10 = 5!/2!/3! + 5!/3!/2!
//           5!/4!    =  5 =  1 +  4 = 4!/4!    + 4!/3!
//
// In S(10), 9!/8!    =  9 =  8 +  1 = 8!/7!    + 1
//           8!/6!/2! = 28 = 21 +  7 = 7!/5!/2! + 7!/6!
//           7!/4!/3! = 35 = 20 + 15 = 6!/3!/3! + 6!/4!/2!
//           6!/2!/4! = 15 =  5 + 10 = 5!/4!    + 5!/3!/2!
//           5!/5!    =  1 =  0 +  1 = 0        + 4!/4!
//
// It is interesting to note how all of the values are the same as combinations, C(n, k).
// So we can rewrite the relationships above as:
// In S(9),  C(8, 7) =  8 =  7 +  1 = C(7, 6) + 1
//           C(7, 5) = 21 = 15 +  6 = C(6, 4) + C(6, 5)
//           C(6, 3) = 20 = 10 + 10 = C(5, 2) + C(5, 3)
//           C(5, 1) =  5 =  1 +  4 = C(4, 0) + C(4, 1)
//
// In S(10), C(9, 8) =  9 =  8 +  1 = C(8, 7) + 1
//           C(8, 6) = 28 = 21 +  7 = C(7, 5) + C(7, 6)
//           C(7, 4) = 35 = 20 + 15 = C(6, 3) + C(6, 4)
//           C(6, 2) = 15 =  5 + 10 = C(5, 1) + C(5, 2)
//           C(5, 0) =  1 =  0 +  1 = 0       + C(4, 0)
//
// Note: in some cases, I replaced k with (n-k) to keep the patterns going.
// We can see how for a given S(n), it can be expressed as the sum:
//      S(n) = C(n-1, n-2) + C(n-2, n-4) + C(n-3, n-6) + ... + C(ceil(n/2), {0,1})  // 0 or 1 depends on n being even or odd
//
// We can then use the identity:
//      C(n, k) = C(n-1, k) + C(n-1, k-1)
// to prove that:
//      S(n) = S(n-1) + S(n-2) + 1
// when we are only looking at the sets with 1s and 2s.

// Look at p^1 column: 0, 0, 0, 0, 0, 2, 6, 15, 32, 64, 122, ...
//        n             set             # combos
//      p + 2          {2,p}            2!/0!/1!                                        2
//      p + 3         {1,2,p}           3!/1!/1!                                        6
//      p + 4        {1,1,2,p}          4!/2!/1! + 3!/0!/2!                             12 + 3 = 15
//      p + 5       {1,1,1,2,p}         5!/3!/1! + 4!/1!/2!                             20 + 12 = 32
//      p + 6      {1,1,1,1,2,p}        6!/4!/1! + 5!/2!/2! + 4!/0!/3!                  30 + 30 + 4 = 64
//      p + 7     {1,1,1,1,1,2,p}       7!/5!/1! + 6!/3!/2! + 5!/1!/3!                  42 + 60 + 20 = 122
//      p + 8    {1,1,1,1,1,1,2,p}      8!/6!/1! + 7!/4!/2! + 6!/2!/3! + 5!/0!/4!       56 + 105 + 60 + 5 = 226
//      p + 9   {1,1,1,1,1,1,1,2,p}     9!/7!/1! + 8!/5!/2! + 7!/3!/3! + 6!/1!/4!       72 + 168 + 140 + 30 = 410
//
// This can be rewritten using combinatorials:
//        n             set             # combos
//      p + 2          {2,p}            2*C(1,1)                                        2
//      p + 3         {1,2,p}           3*C(2,1)                                        6
//      p + 4        {1,1,2,p}          4*C(3,1) + 3*C(2,2)                             12 + 3 = 15
//      p + 5       {1,1,1,2,p}         5*C(4,1) + 4*C(3,2)                             20 + 12 = 32
//      p + 6      {1,1,1,1,2,p}        6*C(5,1) + 5*C(4,2) + 4*C(3,3)                  30 + 30 + 4 = 64
//      p + 7     {1,1,1,1,1,2,p}       7*C(6,1) + 6*C(5,2) + 5*C(4,3)                  42 + 60 + 20 = 122
//      p + 8    {1,1,1,1,1,1,2,p}      8*C(7,1) + 7*C(6,2) + 6*C(5,3) + 5*C(4,4)       56 + 105 + 60 + 5 = 226
//      p + 9   {1,1,1,1,1,1,1,2,p}     9*C(8,1) + 8*C(7,2) + 7*C(6,3) + 6*C(5,4)       72 + 168 + 140 + 30 = 410
// or
//        n             set             # combos
//      p + 2          {2,p}            C(2,1)*C(1,1)                                                   2
//      p + 3         {1,2,p}           C(3,1)*C(2,1)                                                   6
//      p + 4        {1,1,2,p}          C(4,1)*C(3,1) + C(3,2)*C(1,1)                                   12 + 3 = 15
//      p + 5       {1,1,1,2,p}         C(5,1)*C(4,1) + C(4,2)*C(2,1)                                   20 + 12 = 32
//      p + 6      {1,1,1,1,2,p}        C(6,1)*C(5,1) + C(5,2)*C(3,1) + C(4,3)*C(1,1)                   30 + 30 + 4 = 64
//      p + 7     {1,1,1,1,1,2,p}       C(7,1)*C(6,1) + C(6,2)*C(4,1) + C(5,3)*C(2,1)                   42 + 60 + 20 = 122
//      p + 8    {1,1,1,1,1,1,2,p}      C(8,1)*C(7,1) + C(7,2)*C(5,1) + C(6,3)*C(3,1) + C(5,4)*C(1,1)   56 + 105 + 60 + 5 = 226
//      p + 9   {1,1,1,1,1,1,1,2,p}     C(9,1)*C(8,1) + C(8,2)*C(6,1) + C(7,3)*C(4,1) + C(6,4)*C(2,1)   72 + 168 + 140 + 30 = 410
// or
//        n             set             # combos
//      p + 2          {2,p}            C(1,1)*C(2,1)                                                   2
//      p + 3         {1,2,p}           C(2,1)*C(3,1)                                                   6
//      p + 4        {1,1,2,p}          C(3,1)*C(4,1) + C(2,2)*C(3,1)                                   12 + 3 = 15
//      p + 5       {1,1,1,2,p}         C(4,1)*C(5,1) + C(3,2)*C(4,1)                                   20 + 12 = 32
//      p + 6      {1,1,1,1,2,p}        C(5,1)*C(6,1) + C(4,2)*C(5,1) + C(3,3)*C(4,1)                   30 + 30 + 4 = 64
//      p + 7     {1,1,1,1,1,2,p}       C(6,1)*C(7,1) + C(5,2)*C(6,1) + C(4,3)*C(5,1)                   42 + 60 + 20 = 122
//      p + 8    {1,1,1,1,1,1,2,p}      C(7,1)*C(8,1) + C(6,2)*C(7,1) + C(5,3)*C(6,1) + C(4,4)*C(5,1)   56 + 105 + 60 + 5 = 226
//      p + 9   {1,1,1,1,1,1,1,2,p}     C(8,1)*C(9,1) + C(7,2)*C(8,1) + C(6,3)*C(7,1) + C(5,4)*C(6,1)   72 + 168 + 140 + 30 = 410

// Look at p^2 column: 0, 0, 0, 0, 0, 0, 0, 0, 3, 12, 36, ...
//        n              set             # combos
//     2*p + 2         {2,p,p}           3!/0!/1!/2!                                            3
//     2*p + 3        {1,2,p,p}          4!/1!/1!/2!                                            12
//     2*p + 4       {1,1,2,p,p}         5!/2!/1!/2! + 4!/0!/2!/2!                              30 + 6 = 36
//     2*p + 5      {1,1,1,2,p,p}        6!/3!/1!/2! + 5!/1!/2!/2!                              60 + 30 = 90
//     2*p + 6     {1,1,1,1,2,p,p}       7!/4!/1!/2! + 6!/2!/2!/2! + 5!/0!/3!/2!                105 + 90 + 10 = 205
//     2*p + 7    {1,1,1,1,1,2,p,p}      8!/5!/1!/2! + 7!/3!/2!/2! + 6!/1!/3!/2!                168 + 210 + 60 = 438
//     2*p + 8   {1,1,1,1,1,1,2,p,p}     9!/6!/1!/2! + 8!/4!/2!/2! + 7!/2!/3!/2! + 6!/0!/4!/2!  252 + 420 + 210 + 15 = 897
//     2*p + 9  {1,1,1,1,1,1,1,2,p,p}   10!/7!/1!/2! + 9!/5!/2!/2! + 8!/3!/3!/2! + 7!/1!/4!/2!  360 + 756 + 560 + 105 = 1781
//
// Rewritten using combinatorials:
//        n              set             # combos
//     2*p + 2         {2,p,p}           C(3,1)*C(2,2)                                                      3
//     2*p + 3        {1,2,p,p}          C(4,1)*C(3,2)                                                      12
//     2*p + 4       {1,1,2,p,p}         C(5,1)*C(4,2) + C(4,2)*C(2,2)                                      30 + 6 = 36
//     2*p + 5      {1,1,1,2,p,p}        C(6,1)*C(5,2) + C(5,2)*C(3,2)                                      60 + 30 = 90
//     2*p + 6     {1,1,1,1,2,p,p}       C(7,1)*C(6,2) + C(6,2)*C(4,2) + C(5,3)*C(2,2)                      105 + 90 + 10 = 205
//     2*p + 7    {1,1,1,1,1,2,p,p}      C(8,1)*C(7,2) + C(7,2)*C(5,2) + C(6,3)*C(3,2)                      168 + 210 + 60 = 438
//     2*p + 8   {1,1,1,1,1,1,2,p,p}     C(9,1)*C(8,2) + C(8,2)*C(6,2) + C(7,3)*C(4,2) + C(6,4)*C(2,2)      252 + 420 + 210 + 15 = 897
//     2*p + 9  {1,1,1,1,1,1,1,2,p,p}   C(10,1)*C(9,2) + C(9,2)*C(7,2) + C(8,3)*C(5,2) + C(7,4)*C(3,2)      360 + 756 + 560 + 105 = 1781
// or
//        n              set             # combos
//     2*p + 2         {2,p,p}           C(1,1)*C(3,2)                                                      3
//     2*p + 3        {1,2,p,p}          C(2,1)*C(4,2)                                                      12
//     2*p + 4       {1,1,2,p,p}         C(3,1)*C(5,2)  + C(2,2)*C(4,2)                                     30 + 6 = 36
//     2*p + 5      {1,1,1,2,p,p}        C(4,1)*C(6,2)  + C(3,2)*C(5,2)                                     60 + 30 = 90
//     2*p + 6     {1,1,1,1,2,p,p}       C(5,1)*C(7,2)  + C(4,2)*C(6,2) + C(3,3)*C(5,2)                     105 + 90 + 10 = 205
//     2*p + 7    {1,1,1,1,1,2,p,p}      C(6,1)*C(8,2)  + C(5,2)*C(7,2) + C(4,3)*C(6,2)                     168 + 210 + 60 = 438
//     2*p + 8   {1,1,1,1,1,1,2,p,p}     C(7,1)*C(9,2)  + C(6,2)*C(8,2) + C(5,3)*C(7,2) + C(4,4)*C(6,2)     252 + 420 + 210 + 15 = 897
//     2*p + 9  {1,1,1,1,1,1,1,2,p,p}    C(8,1)*C(10,2) + C(7,2)*C(9,2) + C(6,3)*C(8,2) + C(5,4)*C(7,2)     360 + 756 + 560 + 105 = 1781

// Next, let's consider p^3:
//        n               set              # combos
//     3*p + 2         {2,p,p,p}           4!/0!/1!/3!                                              4
//     3*p + 3        {1,2,p,p,p}          5!/1!/1!/3!                                              20
//     3*p + 4       {1,1,2,p,p,p}         6!/2!/1!/3! +  5!/0!/2!/3!                               60 + 10 = 70
//     3*p + 5      {1,1,1,2,p,p,p}        7!/3!/1!/3! +  6!/1!/2!/3!                               140 + 60 = 200
//     3*p + 6     {1,1,1,1,2,p,p,p}       8!/4!/1!/3! +  7!/2!/2!/3! + 6!/0!/3!/3!                 280 + 210 + 20 = 510
//     3*p + 7    {1,1,1,1,1,2,p,p,p}      9!/5!/1!/3! +  8!/3!/2!/3! + 7!/1!/3!/3!                 504 + 560 + 140 = 1204
//     3*p + 8   {1,1,1,1,1,1,2,p,p,p}    10!/6!/1!/3! +  9!/4!/2!/3! + 8!/2!/3!/3! + 7!/0!/4!/3!   840 + 1260 + 560 + 35 = 2695
//     3*p + 9  {1,1,1,1,1,1,1,2,p,p,p}   11!/7!/1!/3! + 10!/5!/2!/3! + 9!/3!/3!/3! + 8!/1!/4!/3!   1320 + 2520 + 1680 + 280 = 5800
//
// Rewritten using combinatorials:
//        n               set              # combos
//     3*p + 2         {2,p,p,p}           C(4,1)*C(3,3)                                                    4
//     3*p + 3        {1,2,p,p,p}          C(5,1)*C(4,3)                                                    20
//     3*p + 4       {1,1,2,p,p,p}         C(6,1)*C(5,3)  +  C(5,2)*C(3,3)                                  60 + 10 = 70
//     3*p + 5      {1,1,1,2,p,p,p}        C(7,1)*C(6,3)  +  C(6,2)*C(4,3)                                  140 + 60 = 200
//     3*p + 6     {1,1,1,1,2,p,p,p}       C(8,1)*C(7,3)  +  C(7,2)*C(5,3) + C(6,3)*C(3,3)                  280 + 210 + 20 = 510
//     3*p + 7    {1,1,1,1,1,2,p,p,p}      C(9,1)*C(8,3)  +  C(8,2)*C(6,3) + C(7,3)*C(4,3)                  504 + 560 + 140 = 1204
//     3*p + 8   {1,1,1,1,1,1,2,p,p,p}    C(10,1)*C(9,3)  +  C(9,2)*C(7,3) + C(8,3)*C(5,3) + C(7,4)*C(3,3)  840 + 1260 + 560 + 35 = 2695
//     3*p + 9  {1,1,1,1,1,1,1,2,p,p,p}   C(11,1)*C(10,3) + C(10,2)*C(8,3) + C(9,3)*C(6,3) + C(8,4)*C(4,3)  1320 + 2520 + 1680 + 280 = 5800
// or
//        n               set              # combos
//     3*p + 2         {2,p,p,p}           C(1,1)*C(4,3)                                                    4
//     3*p + 3        {1,2,p,p,p}          C(2,1)*C(5,3)                                                    20
//     3*p + 4       {1,1,2,p,p,p}         C(3,1)*C(6,3)  + C(2,2)*C(5,3)                                   60 + 10 = 70
//     3*p + 5      {1,1,1,2,p,p,p}        C(4,1)*C(7,3)  + C(3,2)*C(6,3)                                   140 + 60 = 200
//     3*p + 6     {1,1,1,1,2,p,p,p}       C(5,1)*C(8,3)  + C(4,2)*C(7,3)  + C(3,3)*C(6,3)                  280 + 210 + 20 = 510
//     3*p + 7    {1,1,1,1,1,2,p,p,p}      C(6,1)*C(9,3)  + C(5,2)*C(8,3)  + C(4,3)*C(7,3)                  504 + 560 + 140 = 1204
//     3*p + 8   {1,1,1,1,1,1,2,p,p,p}     C(7,1)*C(10,3) + C(6,2)*C(9,3)  + C(5,3)*C(8,3) + C(4,4)*C(7,3)  840 + 1260 + 560 + 35 = 2695
//     3*p + 9  {1,1,1,1,1,1,1,2,p,p,p}    C(8,1)*C(11,3) + C(7,2)*C(10,3) + C(6,3)*C(9,3) + C(5,4)*C(8,3)  1320 + 2520 + 1680 + 280 = 5800

// This can be generalized.  Let us say:
//      n = k*p + q     for some p>2, q>=2
// Then the left coefficients come from the (k+q)'th row of Pascal's Triangle: C(k+q-1,1), C(k+q-2,2), C(k+q-3,3), ...
// The right coefficients are of the form C(k+q-2,k), C(k+q-4,k), C(k+q-6,k), ...
// The number of terms t is such that:
//      k+q-2*t >= k
//      t <= q/2
//      t = floor(q/2)
//
// This can be looked at this way:
// Label the cardinalities as:
//      x 1's, y 2's, z p's
// Then we can look at the number of ways the 2s can be dispersed through the sequences, if we
// consider the 1's and p's as indistinguishable.  There are a total of x+y+z numbers, which
// have (x+y+z)! possible permutation orders.  The 2's are indistinguishable, so divide by y!
// to account for these permutations.  If we ignore the differences between the 1's and p's,
// then there are (x+z)! permutations that can be considered the same.  This results in
//      (x+y+z)! / (x+z)! / y! = C(x+y+z, y)
//
// Next we look at those 1's and p's.  We have the (x+z)! permutations for these numbers,
// but again due to repeats we need to divide by x! and z! to account for those duplicates.
// So there are (x+z)! / x! / z! = C(x+z, z) combinations for the 1's and p's.
//
// The product of these two orthogonal factors matches the expressions calculated above:
//      C(x+y+z, y) * C(x+z, z) = (x+y+z)! / (x+z)! / y! * (x+z)! / x! / z! = (x+y+z)! / x! / y! / z!
//
//
// Alternatively, we can look at it this way:
// Look how the p's can be dispersed throughout the whole sequence.  There are still x+y+z
// numbers, which have (x+y+z)! permutations.  Factoring in the duplicate p's means
// dividing by z!.  If we ignore the differences between the 1's and 2's, then there are
// (x+y)! permutations of these.  This results in
//      (x+y+z)! / z! / (x+y)! = C(x+y+z, z)
//
// Next we look at how many combinations there are for the 1's and 2's.  We have x+y terms,
// with (x+y)! permutations.  But again account for the duplicates, so divide by x! and y!.
//      (x+y)! / x! / y! = C(x+y, y)
//
// The product of these two orthogonal factors matches the expressions calculated above:
//      C(x+y, y) * C(x+y+z, z) = (x+y)! / x! / y! * (x+y+z)! / z! / (x+y)! = (x+y+z)! / x! / y! / z!


// Next, we need to look at sets with 2 different terms >2, called p & q.
// An example of this above is {3,4}: 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 24, ...
//        n               set               # combos
//    p + q + 2         {2,p,q}             3!/0!/1!/1!/1!                                                      6
//    p + q + 3        {1,2,p,q}            4!/1!/1!/1!/1!                                                      24
//    p + q + 4       {1,1,2,p,q}           5!/2!/1!/1!/1! + 4!/0!/2!/1!/1!                                     60 + 12 = 72
//    p + q + 5      {1,1,1,2,p,q}          6!/3!/1!/1!/1! + 5!/1!/2!/1!/1!                                     120 + 60 = 180
//    p + q + 6     {1,1,1,1,2,p,q}         7!/4!/1!/1!/1! + 6!/2!/2!/1!/1! + 5!/0!/3!/1!/1!                    210 + 180 + 20 = 410
//    p + q + 7    {1,1,1,1,1,2,p,q}        8!/5!/1!/1!/1! + 7!/3!/2!/1!/1! + 6!/1!/3!/1!/1!                    336 + 420 + 120 = 876
//    p + q + 8   {1,1,1,1,1,1,2,p,q}       9!/6!/1!/1!/1! + 8!/4!/2!/1!/1! + 7!/2!/3!/1!/1! + 6!/0!/4!/1!/1!   504 + 840 + 420 + 30 = 1794
//    p + q + 9  {1,1,1,1,1,1,1,2,p,q}     10!/7!/1!/1!/1! + 9!/5!/2!/1!/1! + 8!/3!/3!/1!/1! + 7!/1!/4!/1!/1!   720 + 1512 + 1120 + 210 = 3562
//
// Another way to rewrite this is:
//        n               set               # combos
//    p + q + 2         {2,p,q}             C(1,1)*C(3,1)*C(2,1)                                                                            6
//    p + q + 3        {1,2,p,q}            C(2,1)*C(4,1)*C(3,1)                                                                            24
//    p + q + 4       {1,1,2,p,q}           C(3,1)*C(5,1)*C(4,1)  + C(2,2)*C(4,1)*C(3,1)                                                    60 + 12 = 72
//    p + q + 5      {1,1,1,2,p,q}          C(4,1)*C(6,1)*C(5,1)  + C(3,2)*C(5,1)*C(4,1)                                                    120 + 60 = 180
//    p + q + 6     {1,1,1,1,2,p,q}         C(5,1)*C(7,1)*C(6,1)  + C(4,2)*C(6,1)*C(5,1) + C(3,3)*C(5,1)*C(4,1)                             210 + 180 + 20 = 410
//    p + q + 7    {1,1,1,1,1,2,p,q}        C(6,1)*C(8,1)*C(7,1)  + C(5,2)*C(7,1)*C(6,1) + C(4,3)*C(6,1)*C(5,1)                             336 + 420 + 120 = 876
//    p + q + 8   {1,1,1,1,1,1,2,p,q}       C(7,1)*C(9,1)*C(8,1)  + C(6,2)*C(8,1)*C(7,1) + C(5,3)*C(7,1)*C(6,1) + C(4,4)*C(6,1)*C(5,1)      504 + 840 + 420 + 30 = 1794
//    p + q + 9  {1,1,1,1,1,1,1,2,p,q}      C(8,1)*C(10,1)*C(9,1) + C(7,2)*C(9,1)*C(8,1) + C(6,3)*C(8,1)*C(7,1) + C(5,4)*C(7,1)*C(6,1)      720 + 1512 + 1120 + 210 = 3562

// Next, we look at 2 terms >2, with one doubled
//        n                 set             # combos
//   2*p + q + 2         {2,p,p,q}          4!/0!/1!/2!/1!                                                          12
//   2*p + q + 3        {1,2,p,p,q}         5!/1!/1!/2!/1!                                                          60
//   2*p + q + 4       {1,1,2,p,p,q}        6!/2!/1!/2!/1! +  5!/0!/2!/2!/1!                                        180 + 30 = 210
//   2*p + q + 5      {1,1,1,2,p,p,q}       7!/3!/1!/2!/1! +  6!/1!/2!/2!/1!                                        420 + 180 = 600
//   2*p + q + 6     {1,1,1,1,2,p,p,q}      8!/4!/1!/2!/1! +  7!/2!/2!/2!/1! + 6!/0!/3!/2!/1!                       840 + 630 + 60 = 1530
//   2*p + q + 7    {1,1,1,1,1,2,p,p,q}     9!/5!/1!/2!/1! +  8!/3!/2!/2!/1! + 7!/1!/3!/2!/1!                       1512 + 1680 + 420 = 3612
//   2*p + q + 8   {1,1,1,1,1,1,2,p,p,q}   10!/6!/1!/2!/1! +  9!/4!/2!/2!/1! + 8!/2!/3!/2!/1! + 7!/0!/4!/2!/1!      2520 + 3780 + 1680 + 105 = 8085
//   2*p + q + 9  {1,1,1,1,1,1,1,2,p,p,q}  11!/7!/1!/2!/1! + 10!/5!/2!/2!/1! + 9!/3!/3!/2!/1! + 8!/1!/4!/2!/1!      3960 + 7560 + 5040 + 840 = 17400
//
// Another way to rewrite this is:
//        n                 set             # combos
//   2*p + q + 2         {2,p,p,q}          C(1,1)*C(4,1)*C(3,2)                                                                            12
//   2*p + q + 3        {1,2,p,p,q}         C(2,1)*C(5,1)*C(4,2)                                                                            60
//   2*p + q + 4       {1,1,2,p,p,q}        C(3,1)*C(6,1)*C(5,2)   + C(2,2)*C(5,1)*C(4,2)                                                   180 + 30 = 210
//   2*p + q + 5      {1,1,1,2,p,p,q}       C(4,1)*C(7,1)*C(6,2)   + C(3,2)*C(6,1)*C(5,2)                                                   420 + 180 = 600
//   2*p + q + 6     {1,1,1,1,2,p,p,q}      C(5,1)*C(8,1)*C(7,2)   + C(4,2)*C(7,1)*C(6,2)  + C(3,3)*C(6,1)*C(5,2)                           840 + 630 + 60 = 1530
//   2*p + q + 7    {1,1,1,1,1,2,p,p,q}     C(6,1)*C(9,1)*C(8,2)   + C(5,2)*C(8,1)*C(7,2)  + C(4,3)*C(7,1)*C(6,2)                           1512 + 1680 + 420 = 3612
//   2*p + q + 8   {1,1,1,1,1,1,2,p,p,q}    C(7,1)*C(10,1)*C(9,2)  + C(6,2)*C(9,1)*C(8,2)  + C(5,3)*C(8,1)*C(7,2) + C(4,4)*C(7,1)*C(6,2)    2520 + 3780 + 1680 + 105 = 8085
//   2*p + q + 9  {1,1,1,1,1,1,1,2,p,p,q}   C(8,1)*C(11,1)*C(10,2) + C(7,2)*C(10,1)*C(9,2) + C(6,3)*C(9,1)*C(8,2) + C(5,4)*C(8,1)*C(7,2)    3960 + 7560 + 5040 + 840 = 17400

// Next, we look at 2 terms >2, with both doubled
//        n                   set               # combos
//  2*p + 2*q + 2         {2,p,p,q,q}           5!/0!/1!/2!/2!                                                          30
//  2*p + 2*q + 3        {1,2,p,p,q,q}          6!/1!/1!/2!/2!                                                          180
//  2*p + 2*q + 4       {1,1,2,p,p,q,q}         7!/2!/1!/2!/2! +  6!/0!/2!/2!/2!                                        630 + 90 = 720
//  2*p + 2*q + 5      {1,1,1,2,p,p,q,q}        8!/3!/1!/2!/2! +  7!/1!/2!/2!/2!                                        1680 + 630 = 2310
//  2*p + 2*q + 6     {1,1,1,1,2,p,p,q,q}       9!/4!/1!/2!/2! +  8!/2!/2!/2!/2! +  7!/0!/3!/2!/2!                      3780 + 2520 + 210 = 6510
//  2*p + 2*q + 7    {1,1,1,1,1,2,p,p,q,q}     10!/5!/1!/2!/2! +  9!/3!/2!/2!/2! +  8!/1!/3!/2!/2!                      7560 + 7560 + 1680 = 16800
//  2*p + 2*q + 8   {1,1,1,1,1,1,2,p,p,q,q}    11!/6!/1!/2!/2! + 10!/4!/2!/2!/2! +  9!/2!/3!/2!/2! + 8!/0!/4!/2!/2!     13860 + 18900 + 7560 + 420 = 40740
//  2*p + 2*q + 9  {1,1,1,1,1,1,1,2,p,p,q,q}   12!/7!/1!/2!/2! + 11!/5!/2!/2!/2! + 10!/3!/3!/2!/2! + 9!/1!/4!/2!/2!     23760 + 41580 + 25200 + 3780 = 94320
//
// Another way to rewrite this is:
//        n                   set               # combos
//  2*p + 2*q + 2         {2,p,p,q,q}           C(1,1)*C(5,2)*C(3,2)                                                                            30
//  2*p + 2*q + 3        {1,2,p,p,q,q}          C(2,1)*C(6,2)*C(4,2)                                                                            180
//  2*p + 2*q + 4       {1,1,2,p,p,q,q}         C(3,1)*C(7,2)*C(5,2)   + C(2,2)*C(6,2)*C(4,2)                                                   630 + 90 = 720
//  2*p + 2*q + 5      {1,1,1,2,p,p,q,q}        C(4,1)*C(8,2)*C(6,2)   + C(3,2)*C(7,2)*C(5,2)                                                   1680 + 630 = 2310
//  2*p + 2*q + 6     {1,1,1,1,2,p,p,q,q}       C(5,1)*C(9,2)*C(7,2)   + C(4,2)*C(8,2)*C(6,2)  + C(3,3)*C(7,2)*C(5,2)                           3780 + 2520 + 210 = 6510
//  2*p + 2*q + 7    {1,1,1,1,1,2,p,p,q,q}      C(6,1)*C(10,2)*C(8,2)  + C(5,2)*C(9,2)*C(7,2)  + C(4,3)*C(8,2)*C(6,2)                           7560 + 7560 + 1680 = 16800
//  2*p + 2*q + 8   {1,1,1,1,1,1,2,p,p,q,q}     C(7,1)*C(11,2)*C(9,2)  + C(6,2)*C(10,2)*C(8,2) + C(5,3)*C(9,2)*C(7,2)  + C(4,4)*C(8,2)*C(6,2)   13860 + 18900 + 7560 + 420 = 40740
//  2*p + 2*q + 9  {1,1,1,1,1,1,1,2,p,p,q,q}    C(8,1)*C(12,2)*C(10,2) + C(7,2)*C(11,2)*C(9,2) + C(6,3)*C(10,2)*C(8,2) + C(5,4)*C(9,2)*C(7,2)   23760 + 41580 + 25200 + 3780 = 94320

// Next, we look at 3 terms >2, all occurring once
//        n                   set               # combos
//  p + q + r + 2          {2,p,q,r}            4!/0!/1!/1!/1!/1!                                                                   24
//  p + q + r + 3         {1,2,p,q,r}           5!/1!/1!/1!/1!/1!                                                                   120
//  p + q + r + 4        {1,1,2,p,q,r}          6!/2!/1!/1!/1!/1! +  5!/0!/2!/1!/1!/1!                                              360 + 60 = 420
//  p + q + r + 5       {1,1,1,2,p,q,r}         7!/3!/1!/1!/1!/1! +  6!/1!/2!/1!/1!/1!                                              840 + 360 = 1200
//  p + q + r + 6      {1,1,1,1,2,p,q,r}        8!/4!/1!/1!/1!/1! +  7!/2!/2!/1!/1!/1! + 6!/0!/3!/1!/1!/1!                          1680 + 1260 + 120 = 3060
//  p + q + r + 7     {1,1,1,1,1,2,p,q,r}       9!/5!/1!/1!/1!/1! +  8!/3!/2!/1!/1!/1! + 7!/1!/3!/1!/1!/1!                          3024 + 3360 + 840 = 7224
//  p + q + r + 8    {1,1,1,1,1,1,2,p,q,r}     10!/6!/1!/1!/1!/1! +  9!/4!/2!/1!/1!/1! + 8!/2!/3!/1!/1!/1! + 7!/0!/4!/1!/1!/1!      5040 + 7560 + 3360 + 210 = 16170
//  p + q + r + 9   {1,1,1,1,1,1,1,2,p,q,r}    11!/7!/1!/1!/1!/1! + 10!/5!/2!/1!/1!/1! + 9!/3!/3!/1!/1!/1! + 8!/1!/4!/1!/1!/1!      7920 + 15120 + 10080 + 1680 = 34800
//
// Another way to rewrite this is:
//        n                   set               # combos
//  p + q + r + 2          {2,p,q,r}            C(1,1)*C(4,1)*C(3,1)*C(2,1)                                                                                                 24
//  p + q + r + 3         {1,2,p,q,r}           C(2,1)*C(5,1)*C(4,1)*C(3,1)                                                                                                 120
//  p + q + r + 4        {1,1,2,p,q,r}          C(3,1)*C(6,1)*C(5,1)*C(4,1)   + C(2,2)*C(5,1)*C(4,1)*C(3,1)                                                                 360 + 60 = 420
//  p + q + r + 5       {1,1,1,2,p,q,r}         C(4,1)*C(7,1)*C(6,1)*C(5,1)   + C(3,2)*C(6,1)*C(5,1)*C(4,1)                                                                 840 + 360 = 1200
//  p + q + r + 6      {1,1,1,1,2,p,q,r}        C(5,1)*C(8,1)*C(7,1)*C(6,1)   + C(4,2)*C(7,1)*C(6,1)*C(5,1)  + C(3,3)*C(6,1)*C(5,1)*C(4,1)                                  1680 + 1260 + 120 = 3060
//  p + q + r + 7     {1,1,1,1,1,2,p,q,r}       C(6,1)*C(9,1)*C(8,1)*C(7,1)   + C(5,2)*C(8,1)*C(7,1)*C(6,1)  + C(4,3)*C(7,1)*C(6,1)*C(5,1)                                  3024 + 3360 + 840 = 7224
//  p + q + r + 8    {1,1,1,1,1,1,2,p,q,r}      C(7,1)*C(10,1)*C(9,1)*C(8,1)  + C(6,2)*C(9,1)*C(8,1)*C(7,1)  + C(5,3)*C(8,1)*C(7,1)*C(6,1) + C(4,4)*C(7,1)*C(6,1)*C(5,1)    5040 + 7560 + 3360 + 210 = 16170
//  p + q + r + 9   {1,1,1,1,1,1,1,2,p,q,r}     C(8,1)*C(11,1)*C(10,1)*C(9,1) + C(7,2)*C(10,1)*C(9,1)*C(8,1) + C(6,3)*C(9,1)*C(8,1)*C(7,1) + C(5,4)*C(8,1)*C(7,1)*C(6,1)    7920 + 15120 + 10080 + 1680 = 34800

// This can also be generalized.
// We'll start with 2 terms >2, then expand to more than 2 terms.
// This can be looked at this way: label the cardinalities as:
//      x 1's, y 2's, z p's, w q's
// We first look at the p's and q's, where we want to focus on the less common term.
// We can swap the values of p and q so that p is the term that occurs less, and
// q as the term that occurs the same or more.  Therefore
//      z <= w
// We start by looking at the the p's are dispersed throughout the whole sequence.
// This time there are x+y+z+w numbers, which have (x+y+z+w)! permutations.  Factoring
// in the duplicate p's meand dividing by z!.  If we ignore the differences between the
// 1's, 2's, and q's, then there are (x+y+w)! permutations of these.  This results in
//      (x+y+z+w)! / z! / (x+y+w)! = C(x+y+z+w, z)
//
// Next we look at how to disperse the q's through the remaining spots.  There are
// x+y+w positions, which have (x+y+w)! permutations.  Again factor in the duplicate q's
// by dividing by w!, and the indistinguishable 1's and 2's which have (x+y)! permuations.
// This leads results in
//      (x+y+w)! / w! / (x+y!) = C(x+y+w, w)
//
// Last, we have the 1's and 2's.  We have x+y of them, so (x+y)! permutations.  Accouting
// for duplicate 1's and 2's meand dividing by x! and y!.  This results in
//      (x+y)! / x! / y! = C(x+y, y)
//
// The product of these three orthogonal factors mathces the expressions calculated above
//      C(x+y, y) * C(x+y+z+w, z) * C(x+y+w, w) = (x+y)! / x! / y! * (x+y+z+w)! / z! / (x+y+w)! * (x+y+w)! / w! / (x+y)!
//                                              = (x+y+z+w)! / x! / y! / z! / w!


using AddendCounts = std::vector<int64_t>;
using AllAddendsForSum = std::set<AddendCounts>;
using AddendsBySum = std::vector<AllAddendsForSum>;


class SolverBrute {
public:
    static constexpr int64_t kModulus = 1'000'000'000;

    SolverBrute() {
        addends_.push_back({}); // empty set for n = 0
        addends_.push_back({}); // empty set for n = 1
    }


    int64_t solve_it() {
        int64_t n{ 2 };
        while (true) {
            int64_t t_val = t(n);
            std::cout << "t(" << n << ") = " << t_val << std::endl;
            if (1'000'000 == t_val)
                return t_val;
            ++n;
        }
    }


    AllAddendsForSum get_twopal_addend_sets(int64_t n) {
        if ((addends_.size() > n) && !addends_[n].empty())
            return addends_[n];

        AllAddendsForSum ret;

        const int64_t max_term = n - 2;

        // First do sets of only 1s and 2s
        {
            const int64_t max_2_card = n / 2;
            AddendCounts counts{ 0, n - 2, 1 };
            ret.insert(counts);
            while (counts[1] >= 2) {
                counts[1] -= 2;
                ++counts[2];
                ret.insert(counts);
            }
        }

        // Add sets with two addends > 1
        for (int64_t term = 3; term <= max_term; ++term) {
            const int64_t max_term_card = (n - 2) / term;

            // Start with 1x 2, 1x term, and as many 1s as needed to sum to n
            for (int64_t term_card = 1; term_card <= max_term_card; ++term_card) {
                AddendCounts counts;
                counts.resize(term + 1);
                counts[1] = n - 2 - term * term_card;
                counts[2] = 1;
                counts[term] = term_card;
                ret.insert(counts);

                // Replace pairs of 1s with a 2
                while (counts[1] >= 2) {
                    counts[1] -= 2;
                    ++counts[2];
                    ret.insert(counts);
                }
            }
        }

        // Add any sets with 3 or more addends > 1
        for (int64_t term = 4; term <= max_term; ++term) {
            const auto &subsets = addends_[n - term];

            for (auto iter = subsets.begin(); iter != subsets.end(); ++iter) {
                AddendCounts counts = *iter;
                if (counts.size() <= term)
                    counts.resize(term + 1);
                ++counts[term];
                ret.insert(counts);
            }
        }

        addends_.resize(n + 1);
        addends_[n] = ret;

        return ret;
    }


    int64_t S(int64_t n) {
        int64_t ret{ 0 };

        const auto all_sets = get_twopal_addend_sets(n);

        for (const auto& counts : all_sets) {
            const int64_t num_addends = std::accumulate(counts.cbegin(), counts.cend(), int64_t{ 0 });
            const auto max_card_iter = std::max_element(counts.cbegin(), counts.cend());

            std::multiset<int64_t> terms;
            for (int64_t term = *max_card_iter + 1; term <= num_addends; ++term) {
                const auto factors = helper_.get_factorization(term);
                for (const auto& [prime, exp] : factors) {
                    for (uint64_t i = 0; i < exp; ++i)
                        terms.insert(prime);
                }
            }

            for (auto iter = counts.cbegin(); iter != counts.cend(); ++iter) {
                // Skip 0 and 1 counts, they don't change product.
                if (2 > *iter)
                    continue;
                // Skip the max cardinality, we don't want to double divide.
                if (max_card_iter == iter)
                    continue;

                // We want to divide by (*iter)!
                for (int64_t i = 2; i <= *iter; ++i) {
                    const auto factors = helper_.get_factorization(i);
                    for (const auto& [prime, exp] : factors) {
                        for (uint64_t i = 0; i < exp; ++i)
                            terms.erase(terms.find(prime));
                    }
                }
            }

            int64_t value{ 1 };
            for (const auto& t : terms) {
                value *= t;
                value %= kModulus;
            }
            ret += value;
            ret %= kModulus;
        }

//        std::cout << "S(" << n << ") = " << ret << std::endl;
        return ret;
    }

    int64_t P(int64_t n) {
        int64_t ret{ 1 };
        for (int64_t i = 1; i < n; ++i) {
            ret *= 2;
            ret %= kModulus;
        }

//        std::cout << "P(" << n << ") = " << ret << std::endl;
        return ret;
    }


    int64_t t(int64_t n) {
        int64_t ret{ 0 };

        if (n % 2) {
            // t(n) = S((n-1)/2) + S((n-3)/2 + S((n-5)/2) + ... + S(2)             for odd n
            const int64_t max_k = (n - 1) / 2;
            for (int64_t k = 2; k <= max_k; ++k) {
                ret += S(k);
                ret %= kModulus;
            }
        }
        else {
            // t(n) = S(n/2) + P((n-2)/2) + S((n-4)/2) + S((n-6)/2) + ... + S(2)   for even n
            const int64_t max_k = n / 2;
            for (int64_t k = 2; k < max_k - 1; ++k) {
                ret += S(k);
                ret %= kModulus;
            }
            ret += P(max_k - 1);
            ret %= kModulus;
            ret += S(max_k);
            ret %= kModulus;
        }
        return ret;
    }

private:
    AddendsBySum addends_;
    PrimeHelper helper_;

};


class Solver {
public:
    static constexpr int64_t kModulus = 1'000'000'000;
    using CountsBySum = std::vector<int64_t>;
    using SumCountsByLargestTerm = std::vector<CountsBySum>;
//    using SumCountsBy
    using BinomialRow = std::vector<int32_t>;
    using PascalsTriangle = std::vector<BinomialRow>;  // tri[n][k] == C(n, k) = n!/k!/(n-k)!
    using Counts1_2 = PascalsTriangle;  // count[n][k] = #combos of k 2's and (n-k) 1's

    Solver() {
        only1and2_.push_back(0);  //  can't sum to 0
        only1and2_.push_back(0);  //  can't sum to 1
        only1and2_.push_back(1);  //  a single 2 can sum to 2

        singleAddendOver2_.push_back(2);  // there are 2 combinations with no 1s; {2,p}, {p,2}

        binomial_coeff_.push_back({ {1} });       // 1 combination sums to 0: {0}
        binomial_coeff_.push_back({ {1, 1} });    // 2 combinations sum to 1: {0,1}, {1,0}

        count12_.push_back({ });  // no combos w/ at least one 2 sum to 0
        count12_.push_back({ });  // no combos w/ at least one 2 sum to 1
        count12_.push_back({ {1} });  // 1 combo sums to 2 - {2}
        count12_.push_back({ {2} });  // 2 combos sum to 3 - {1,2}, {2,1}
    }


    int64_t solve_it() {
        int64_t n{ 2 };
        while (true) {
            int64_t t_val = t(n);
            std::cout << "t(" << n << ") = " << t_val << std::endl;
            if (1'000'000 == t_val)
                return t_val;
            ++n;
        }
    }


    int64_t S(int64_t n) {
        while (n >= only1and2_.size()) {
            auto iter = only1and2_.crbegin();
            int64_t ult = *iter++;
            int64_t penult = *iter;
            only1and2_.push_back(ult + penult + 1);
        }

        const int64_t max_num_ones = n - 5;  // most combos with one 2, one 3, and the rest 1s
        if (max_num_ones >= 0) {
            int64_t max_binom_scale = n - 3;  // 3 is smallest term >2 that can be involved
            while (binomial_coeff_.size() <= max_binom_scale)
                add_binomial_row();

            while (singleAddendOver2_.size() <= max_num_ones) {
                int64_t k{ 1 };
                int64_t new_term{ 0 };

                for (int64_t scale = singleAddendOver2_.size() + 2; scale > k; --scale, ++k) {
                    new_term += scale * binomial_coeff_[scale - 1][k];
                    new_term %= kModulus;
                }

                singleAddendOver2_.push_back(new_term);
            }
        }

        int64_t ret = only1and2_[n];
        for (int64_t ind = 0; ind <= max_num_ones; ++ind) {
            ret += singleAddendOver2_[ind];
            ret %= kModulus;
        }
//        std::cout << "S(" << n << ") = " << ret << std::endl;
        return ret;
    }


    int64_t P(int64_t n) {
        int64_t ret{ 1 };
        for (int64_t i = 1; i < n; ++i) {
            ret *= 2;
            ret %= kModulus;
        }

        //        std::cout << "P(" << n << ") = " << ret << std::endl;
        return ret;
    }


    int64_t t(int64_t n) {
        int64_t ret{ 0 };

        if (n % 2) {
            // t(n) = S((n-1)/2) + S((n-3)/2 + S((n-5)/2) + ... + S(2)             for odd n
            const int64_t max_k = (n - 1) / 2;
            for (int64_t k = 2; k <= max_k; ++k) {
                ret += S(k);
                ret %= kModulus;
            }
        }
        else {
            // t(n) = S(n/2) + P((n-2)/2) + S((n-4)/2) + S((n-6)/2) + ... + S(2)   for even n
            const int64_t max_k = n / 2;
            for (int64_t k = 2; k < max_k - 1; ++k) {
                ret += S(k);
                ret %= kModulus;
            }
            ret += P(max_k - 1);
            ret %= kModulus;
            ret += S(max_k);
            ret %= kModulus;
        }
        return ret;
    }

    void add_binomial_row() {
        binomial_coeff_.push_back({});
        const auto& last_row = *(binomial_coeff_.crbegin() + 1);
        auto& new_row = binomial_coeff_.back();
        new_row.resize(binomial_coeff_.size());
        new_row[0] = 1;
        for (size_t i = 1; i < last_row.size(); ++i) {
            new_row[i] = (last_row[i - 1] + last_row[i]) % kModulus;
        }
        new_row.back() = 1;
    }

    void print_pascals_triangle() {
        for (const auto& row : binomial_coeff_) {
            for (const auto& val : row)
                std::cout << val << "  ";
            std::cout << std::endl;
        }
    }

    void add_1_2_count_row() {
        const size_t new_n = count12_.size();
        count12_.push_back({});
        const auto& prev_row = *(count12_.crbegin() + 2);
        const auto& last_row = *(count12_.crbegin() + 1);
        auto& new_row = count12_.back();
        new_row.resize(new_n / 2);
        new_row[0] = last_row[0] + 1;
        for (size_t i = 1; i < last_row.size(); ++i) {
            new_row[i] = last_row[i] + prev_row[i - 1];
        }
        if (new_row.size() > last_row.size())
            new_row.back() = 1;
    }

    void print_1_2_counts() {
        size_t n{ 0 };
        for (const auto& row : count12_) {
            std::cout << n++ << " : ";
            for (const auto& val : row)
                std::cout << val << "  ";
            std::cout << std::endl;
        }
        std::cout << "sums = ";
        for (const auto& row : count12_) {
            std::cout << std::accumulate(row.cbegin(), row.cend(), int32_t{ 0 }) << "  ";
        }
        std::cout << std::endl;
    }

    std::vector<std::multiset<int32_t>> get_addend_sets(int64_t value) {
        std::vector<std::multiset<int32_t>> ret;

        // Every set must contain at least one 2.
        const int64_t max_2s = value / 2;

        for (int64_t num_2s = 1; num_2s <= max_2s; ++num_2s) {
            int64_t remainder = value - 2 * num_2s;
        }


        return ret;
    }

private:
    CountsBySum only1and2_;             // indexed by sum of all terms
    CountsBySum singleAddendOver2_;     // indexed by # of 1s
    PascalsTriangle binomial_coeff_;
    Counts1_2 count12_;
};


// See below for some tracing of this
std::vector<int64_t> fast_recurse(int64_t max_n) {
    std::vector<int64_t> ret;

    ret.resize(max_n + 1);
    ret[0] = 0;
    ret[1] = 0;
    ret[2] = 1;

    int64_t pow2{ 1 };
    for (int64_t i = 3; i <= max_n; ++i) {
        ret[i] = ret[i - 2] + ret[i - 3];
        if (i % 2 == 0) {
            ret[i] += pow2;
            pow2 *= 2;
        }
    }

    return ret;
}


int64_t recurse_solve_it() {
    constexpr int64_t kModulus{ 1'000'000'000 };

    int64_t tn_2 = 0;
    int64_t tn_1 = 1;
    int64_t tn = 0;

    int64_t n = 4;
    int64_t pow2{ 1 };
    while (true) {
        int64_t tn_p_1 = (tn_2 + tn_1) % kModulus;
        if (n % 2 == 0) {
            tn_p_1 += pow2;
            tn_p_1 %= kModulus;
            pow2 *= 2;
            pow2 %= kModulus;
        }

        if (n % 1000 == 0)
            std::cout << n << "\t" << tn_p_1 << std::endl;

        if (0 == tn_p_1 % 1'000'000)
            return n;

//        if (tn_p_1 > 1'000'000)
//            return n;

        ++n;
        tn_2 = tn_1;
        tn_1 = tn;
        tn = tn_p_1;
    }
}


int main()
{
    std::cout << "Hello World!\n";

    //{
    //    SolverBrute solver;
    //    for (int64_t n = 2; n < 10; ++n)
    //        solver.get_twopal_addend_sets(n);

    //    auto all_sets = solver.get_twopal_addend_sets(10);
    //    for (auto iter = all_sets.crbegin(); iter != all_sets.crend(); ++iter) {
    //        for (size_t n = 1; n < iter->size(); ++n) {
    //            auto count = (*iter)[n];
    //            while (count-- > 0) {
    //                std::cout << n << ", ";
    //            }
    //        }
    //        std::cout << std::endl;
    //    }
    //}

    //{
    //    SolverBrute solver;
    //    std::cout << "using Solver" << std::endl;
    //    std::cout << "S(2) = " << solver.S(2) << std::endl;
    //    std::cout << "S(3) = " << solver.S(3) << std::endl;
    //    std::cout << "S(4) = " << solver.S(4) << std::endl;
    //    std::cout << "S(5) = " << solver.S(5) << std::endl;
    //    std::cout << "S(6) = " << solver.S(6) << std::endl;
    //    std::cout << "S(7) = " << solver.S(7) << std::endl;
    //    std::cout << "S(8) = " << solver.S(8) << std::endl;
    //    std::cout << "P(9) = " << solver.P(9) << std::endl;
    //    std::cout << "S(10) = " << solver.S(10) << std::endl;
    //
    //    std::cout << "t(20) = " << solver.t(20) << std::endl;
    //    std::cout << "t(42) = " << solver.t(42) << std::endl;
    //}

    //{
    //    Solver solver;
    //    for (size_t i = 0; i < 100; ++i)
    //        solver.add_binomial_row();
    //    solver.print_pascals_triangle();
    //}

    //{
    //    Solver solver;
    //    for (size_t i = 0; i < 20; ++i)
    //        solver.add_1_2_count_row();
    //    solver.print_1_2_counts();
    //}

    //{
    //    Solver solver;
    //    auto addend_sets = solver.get_addend_sets(10);
    //    for (const auto& addends : addend_sets) {
    //        for (const auto& add : addends)
    //            std::cout << add << ", ";
    //        std::cout << std::endl;
    //    }
    //}

    //{
    //    Solver solver;
    //    std::cout << "The answer is n = " << solver.solve_it() << std::endl;
    //}

    //{
    //    auto tn = fast_recurse(50);
    //    for (size_t n = 0; n < tn.size(); ++n)
    //        std::cout << n << "\t" << tn[n] << std::endl;
    //}

    {
        auto ans = recurse_solve_it();
        std::cout << "The answer is n = " << ans << std::endl;
    }
}


// if n is odd, t(n) = t(n-2) + t(n-3)
// if n is even, t(n) = t(n-2) + t(n-3) + 2^(n/2-2)

//  n       t(n)         t(n)-t(n-2)
//t(0)   = 0
//t(1)   = 0
//t(2)   = 1                  1
//t(3)   = 0                  0
//t(4)   = 2                  1
//t(5)   = 1                  1
//t(6)   = 4                  2
//t(7)   = 3                  2
//t(8)   = 9                  5
//t(9)   = 7                  4
//t(10)  = 20                11
//t(11)  = 16                 9
//t(12)  = 43                23
//t(13)  = 36                20
//t(14)  = 91                48
//t(15)  = 79                43
//t(16)  = 191              100
//t(17)  = 170               91
//t(18)  = 398              207
//t(19)  = 361              191
//t(20)  = 824              426
//t(21)  = 759              398
//t(22)  = 1697             873
//t(23)  = 1583             824
//t(24)  = 3480            1783
//t(25)  = 3280            1697
//t(26)  = 7111            3631
//t(27)  = 6760            3480
//t(28)  = 14487           7376
//t(29)  = 13871           7111
//t(30)  = 29439          14952
//t(31)  = 28358          14487
//t(32)  = 59694          30255
//t(33)  = 57797          29439
//t(34)  = 120820         61126
//t(35)  = 117491         59694
//t(36)  = 244153        123333
//t(37)  = 238311        120820
//t(38)  = 492716        248563
//t(39)  = 482464        244153
//t(40)  = 993171        500455
//t(41)  = 975180        492716
//t(42)  = 1999923      1006752
//t(43)  = 1968351
//t(44)  = 4023679
//t(45)  = 3968274
//t(46)  = 8089182
//t(47)  = 7991953
//t(48)  = 16251760
//t(49)  = 16081135
//t(50)  = 32632321
//t(51)  = 32332895
//t(52)  = 65490672
//t(53)  = 64965216
//t(54)  = 131377999
//t(55)  = 130455888
//t(56)  = 263452079
//t(57)  = 261833887
//t(58)  = 528125695
//t(59)  = 525285966
//t(60)  = 58395038
//t(61)  = 53411661
//t(62)  = 120551916
//t(63)  = 111806699
//t(64)  = 247705401
//t(65)  = 232358615
//t(66)  = 506995748
//t(67)  = 480064016
//t(68)  = 34321659
//t(69)  = 987059764
//t(70)  = 104320267
//t(71)  = 21381423
//t(72)  = 271249215
//t(73)  = 125701690
//t(74)  = 652369006
//t(75)  = 396950905
//t(76)  = 497547432
//t(77)  = 49319911
//t(78)  = 333451809
//t(79)  = 546867343
//t(80)  = 260678664
//t(81)  = 880319152
//t(82)  = 563359895
//t(83)  = 140997816
//t(84)  = 955306823
//t(85)  = 704357711
//t(86)  = 119560191
//t(87)  = 659664534
//t(88)  = 870429006
//t(89)  = 779224725
//t(90)  = 623115748
//t(91)  = 649653731
//t(92)  = 588384889
//t(93)  = 272769479
//t(94)  = 610127452
//t(95)  = 861154368
//t(96)  = 627074595
//t(97)  = 471281820
//t(98)  = 976584291
//t(99)  = 98356415
//t(100) = 424576767
//t(101) = 74940706
//t(102) = 476354494
//t(103) = 499517473
//t(104) = 458137824
//t(105) = 975871967
//t(106) = 771340545
//t(107) = 434009791
//t(108) = 374583008
//t(109) = 205350336
//t(110) = 63333791
//t(111) = 579933344
//t(112) = 778166111
//t(113) = 643267135
//t(114) = 377063423
//t(115) = 421433246
//t(116) = 58258494
//t(117) = 798496669
//t(118) = 555547612
//t(119) = 856755163
//t(120) = 505756025
//t(121) = 412302775
//t(122) = 665934676
//t(123) = 918058800
//t(124) = 685084427
//t(125) = 583993476
//t(126) = 816837179
//t(127) = 269077903
//t(128) = 828218559
//t(129) = 85915082
//t(130) = 952072270
//t(131) = 914133641
//t(132) = 747538968
//t(133) = 866205911
//t(134) = 80775841
//t(135) = 613744879
//t(136) = 785188216
//t(137) = 694520720
//t(138) = 75346023
//t(139) = 479708936
//t(140) = 122692599
//t(141) = 555054959
//t(142) = 308053247
//t(143) = 677747558
//t(144) = 274411630
//t(145) = 985800805
//t(146) = 774766036
//t(147) = 260212435
//t(148) = 405780537
//t(149) = 34978471
//t(150) = 956420364
//t(151) = 440759008
//t(152) = 572253619
//t(153) = 397179372
//t(154) = 174722195
//t(155) = 969432991
//t(156) = 895320703
//t(157) = 144155186
//t(158) = 511591966
//t(159) = 39475889
//t(160) = 949423696
//t(161) = 551067855
//t(162) = 576252673
//t(163) = 500491551
//t(164) = 302026704
//t(165) = 76744224
//t(166) = 151930607
//t(167) = 378770928
//t(168) = 927499535
//t(169) = 530701535
//t(170) = 703919871
//t(171) = 458201070
//t(172) = 29920222
