// For every positive integer n the Fibonacci sequence modulo n is periodic.
// The period depends on the value of n.
// This period is called the Pisano period for n, often shortened to pi(n).
//
// There are three values of n for which pi(n) equals 18: 19, 38, and 76.
// The sum of those smaller than 50 is 57.
//
// Find the sum of the values of n smaller than 1,000,000,000 for which pi(n) equals 120.


#include <iostream>
#include <numeric>

#include "big_int.h"


// First off, we need at least the first 120 Fibonacci numbers to establish what the period is
// for a given n.  That will require the BigInt class as it won't fit in a 64-bit number.
// Second, it doesn't matter where we start looking for the period, the Pisano period is defined such that:
//      Fib(i) mod n == Fib(i + pi(n)) mod n
// for all i.  If we start with Fib(0) = 0, then we know that Fib(pi(n)) mod n == 0.

// This is a necessary but not sufficient condition.  Take for example n = 9:
//         i                Fib(i)             Fib(i) % 9
//         0                     0                  0
//         1                     1                  1
//         2                     1                  1
//         3                     2                  2
//         4                     3                  3
//         5                     5                  5
//         6                     8                  8
//         7                    13                  4
//         8                    21                  3
//         9                    34                  7
//        10                    55                  1
//        11                    89                  8
//        12                   144                  0
//        13                   233                  8
//        14                   377                  8
//        15                   610                  7
//        16                   987                  6
//        17                  1597                  4
//        18                  2584                  1
//        19                  4181                  5
//        20                  6765                  6
//        21                 10946                  2
//        22                 17711                  8
//        23                 28657                  1
//        24                 46368                  0
//        25                 75025                  1
//        26                121393                  1
//
// We can see that Fib(12) mod 9 == 0, but pi(9) != 12.
// We also need to look at Fib(pi(n) +- 1) mod n to verify that it has the value of 1.
// Fib(11) mod 9 = Fib(13) mod 9 = 8, so we have found a zero of the modular sequence,
// but not the beginning of the next cycle.
// The Fibonacci numbers get big, so it is easier to look at Fib(pi(n) - 1) instead of +1.

// But that's not all.  One might think that this means we only need to check Fib(119)
// and Fib(120) to see if their values mod n are 1 and 0, respectively.  This is another
// necessary but not sufficient condition.  In the case of n = 9, they will in fact both
// satisfy the requirements.  But that is because 120 is a multiple of 24, the real value
// of pi(9).  So we need to check a couple other Fibonacci numbers to make sure their moduli
// do not satisfy the requirments to be pi(n).
// The number 120 has many divisors:
//      2, 3, 4, 5, 6, 8, 10, 12, 15, 20, 24, 30, 40, 60
// We need to check that none of these Fibonacci numbers satisfy the repetition requirements.
// But we can be efficient and use a couple of these factors, which are multiples of the other
// factors:
//   - Fib(60) will also cover 2, 3, 4, 5, 6, 10, 12, 15, 20, 30
//   - Fib(40) will also cover 2, 4, 5, 8, 10, 20
//   - Fib(24) will also cover 2, 3, 4, 6, 8, 12

// So, for pi(n) = 120, these are the requirements:
//      Fib(120) mod n = 0
//      Fib(119) mod n = 1
//      Fib(60) mod n != 0
//      Fib(59) mod n != 1
//      Fib(40) mod n != 0
//      Fib(39) mod n != 1
//      Fib(24) mod n != 0
//      Fib(23) mod n != 1


struct SpecialFibs {
    int64_t fib23;
    int64_t fib24;
    int64_t fib39;
    int64_t fib40;
    int64_t fib59;
    int64_t fib60;
    BigInt fib119;
    BigInt fib120;
};


SpecialFibs get_special_fibs() {
    std::vector<BigInt> fibs;
    fibs.reserve(121);
    fibs.push_back(BigInt{ 0 });  //  Fib(0) = 0
    fibs.push_back(BigInt{ 1 });  //  Fib(1) = 1

    for (size_t i = 2; i <= 120; ++i) {
        fibs.push_back(fibs[i - 2] + fibs[i - 1]);
    }

    return SpecialFibs{
        .fib23 = fibs[23].to_int(),
        .fib24 = fibs[24].to_int(),
        .fib39 = fibs[39].to_int(),
        .fib40 = fibs[40].to_int(),
        .fib59 = fibs[59].to_int(),
        .fib60 = fibs[60].to_int(),
        .fib119 = fibs[119],
        .fib120 = fibs[120]
    };
}


std::vector<int64_t> get_n_values(int64_t max_n) {
    const auto spec = get_special_fibs();
    const int64_t pi_n{ 120 };

    std::vector<int64_t> ret;

    for (int64_t n = 2; n <= max_n; ++n) {
        if (n % 1'000'000 == 0) std::cout << n << "\t" << ret.size() << std::endl;
        if ((spec.fib23 % n == 1) && (spec.fib24 % n == 0))
            continue;
        if ((spec.fib39 % n == 1) && (spec.fib40 % n == 0))
            continue;
        if ((spec.fib59 % n == 1) && (spec.fib60 % n == 0))
            continue;
        if ((spec.fib119 % n != 1) || (spec.fib120 % n != 0))
            continue;
        ret.push_back(n);
    }

    return ret;
}


int main()
{
    std::cout << "Hello World!\n";

    //{
    //    auto spec = get_special_fibs();
    //    int64_t n = 120;
    //    std::cout << "Fib[23] = " << spec.fib23 << "\t" << spec.fib23 % n << std::endl;
    //    std::cout << "Fib[24] = " << spec.fib24 << "\t" << spec.fib24 % n << std::endl;
    //    std::cout << "Fib[39] = " << spec.fib39 << "\t" << spec.fib39 % n << std::endl;
    //    std::cout << "Fib[40] = " << spec.fib40 << "\t" << spec.fib40 % n << std::endl;
    //    std::cout << "Fib[59] = " << spec.fib59 << "\t" << spec.fib59 % n << std::endl;
    //    std::cout << "Fib[60] = " << spec.fib60 << "\t" << spec.fib60 % n << std::endl;
    //    std::cout << "Fib[119] = " << spec.fib119 << "\t" << spec.fib119 % n << std::endl;
    //    std::cout << "Fib[120] = " << spec.fib120 << "\t" << spec.fib120 % n << std::endl;
    //}

    //{
    //    auto n_val = get_n_values(144);
    //    for (const auto& n : n_val)
    //        std::cout << n << std::endl;
    //}

    {
        auto n_val = get_n_values(1'000'000'000);
        for (const auto& n : n_val)
            std::cout << n << std::endl;
        std::cout << n_val.size() << " values of n" << std::endl;
        std::cout << "sum = " << std::accumulate(n_val.cbegin(), n_val.cend(), int64_t{0}) << std::endl;
    }
}


//30
//45
//60
//66
//80
//82
//90
//93
//99
//120
//132
//164
//176
//180
//183
//186
//198
//240
//246
//264
//279
//328
//330
//360
//366
//369
//372
//396
//410
//465
//492
//495
//496
//528
//549
//558
//656
//660
//720
//732
//738
//744
//792
//820
//880
//902
//915
//930
//976
//984
//990
//1023
//1098
//1116
//1230
//1271
//1320
//1395
//1464
//1476
//1488
//1584
//1640
//1804
//1830
//1845
//1860
//1968
//1980
//2013
//2046
//2196
//2232
//2460
//2480
//2501
//2521
//2542
//2640
//2706
//2745
//2790
//2928
//2952
//3069
//3280
//3608
//3660
//3690
//3720
//3813
//3960
//4026
//4059
//4092
//4392
//4464
//4510
//4880
//4920
//5002
//5042
//5084
//5115
//5412
//5456
//5490
//5580
//5673
//5904
//6039
//6138
//6355
//7216
//7320
//7380
//7440
//7503
//7563
//7626
//7920
//8052
//8118
//8184
//8784
//9020
//9840
//10004
//10065
//10084
//10168
//10230
//10736
//10824
//10980
//11160
//11346
//11439
//12078
//12276
//12505
//12605
//12710
//13530
//13981
//14640
//14760
//15006
//15126
//15252
//15345
//16104
//16236
//16368
//17019
//18040
//19065
//20008
//20130
//20168
//20295
//20336
//20460
//21648
//21960
//22320
//22509
//22689
//22692
//22878
//24156
//24552
//25010
//25210
//25420
//27060
//27280
//27511
//27731
//27962
//28365
//29520
//30012
//30195
//30252
//30256
//30504
//30690
//32208
//32472
//34038
//36080
//37515
//37815
//38130
//40016
//40260
//40336
//40590
//40920
//41943
//43920
//45018
//45378
//45384
//45756
//48312
//49104
//50020
//50420
//50840
//53680
//54120
//55022
//55462
//55924
//56730
//57195
//60024
//60390
//60504
//61008
//61380
//62403
//64944
//68076
//69905
//75030
//75630
//76260
//77531
//78151
//80520
//81180
//81840
//82533
//83193
//83886
//85095
//90036
//90756
//90768
//91512
//96624
//100040
//100840
//101680
//103361
//108240
//110044
//110924
//111848
//112545
//113445
//113460
//114390
//120048
//120780
//121008
//122760
//124806
//125829
//136152
//137555
//138655
//139810
//150060
//151260
//151280
//152520
//153781
//155062
//156302
//161040
//162360
//165066
//166386
//167772
//170190
//180072
//181512
//183024
//187209
//200080
//201680
//206722
//209715
//220088
//221848
//223696
//225090
//226890
//226920
//228780
//232593
//234453
//241560
//245520
//247599
//249579
//249612
//251658
//272304
//275110
//277310
//279620
//300120
//302520
//305040
//307562
//310083
//310124
//312015
//312604
//324720
//330132
//332772
//332816
//335544
//340380
//360144
//363024
//374418
//387655
//390755
//412665
//413444
//415965
//419430
//440176
//443696
//450180
//453780
//453840
//457560
//461343
//465186
//468906
//483120
//495198
//499158
//499224
//503316
//516805
//550220
//554620
//559240
//600240
//605040
//615124
//620166
//620248
//624030
//625208
//629145
//660264
//665544
//671088
//680760
//697779
//703359
//748836
//768905
//775310
//781510
//825330
//826888
//831930
//838860
//852841
//859661
//900360
//907560
//915120
//922686
//930249
//930372
//936045
//937812
//990396
//998316
//998448
//1006632
//1033610
//1100440
//1109240
//1118480
//1136971
//1162965
//1172265
//1230248
//1237995
//1240332
//1240496
//1247895
//1248060
//1250416
//1258290
//1320528
//1331088
//1361520
//1384029
//1395558
//1406718
//1497672
//1537810
//1550415
//1550620
//1563020
//1650660
//1653776
//1663860
//1664080
//1677720
//1691591
//1705682
//1719322
//1800720
//1815120
//1845372
//1860498
//1860744
//1872090
//1875624
//1980792
//1996632
//2013264
//2067220
//2200880
//2218480
//2273942
//2306715
//2325930
//2344530
//2460496
//2475990
//2480664
//2495790
//2496120
//2516580
//2558523
//2578983
//2768058
//2791116
//2813436
//2995344
//3075620
//3100830
//3101240
//3126040
//3204191
//3301320
//3327720
//3355440
//3383182
//3410913
//3411364
//3438644
//3488895
//3516795
//3690744
//3720996
//3721488
//3744180
//3751248
//3961584
//3993264
//4134440
//4264205
//4298305
//4547884
//4613430
//4651245
//4651860
//4689060
//4767211
//4951980
//4961328
//4991580
//4992240
//5033160
//5074773
//5117046
//5157966
//5536116
//5582232
//5626872
//5684855
//6151240
//6201660
//6202480
//6252080
//6305021
//6408382
//6602640
//6655440
//6766364
//6821826
//6822728
//6877288
//6920145
//6977790
//7033590
//7381488
//7441992
//7488360
//7675569
//7736949
//8268880
//8457955
//8528410
//8596610
//9095768
//9226860
//9302490
//9303720
//9378120
//9534422
//9612573
//9903960
//9983160
//10066320
//10149546
//10232739
//10234092
//10315932
//11072232
//11164464
//11253744
//11369710
//12302480
//12403320
//12610042
//12792615
//12816764
//12894915
//13532728
//13643652
//13645456
//13754576
//13840290
//13955580
//14067180
//14301633
//14883984
//14976720
//15224319
//15351138
//15473898
//16020955
//16915910
//17054565
//17056820
//17193220
//18191536
//18453720
//18604980
//18607440
//18756240
//18915063
//19068844
//19225146
//19807920
//19966320
//20299092
//20465478
//20468184
//20631864
//22144464
//22739420
//23836055
//24806640
//25220084
//25373865
//25585230
//25633528
//25789830
//27065456
//27287304
//27680580
//27911160
//28134360
//28603266
//28837719
//30448638
//30702276
//30947796
//31525105
//32041910
//33831820
//34109130
//34113640
//34386440
//35246101
//36907440
//37209960
//37830126
//38137688
//38377845
//38450292
//38684745
//40598184
//40930956
//40936368
//41263728
//42904899
//45478840
//47672110
//48062865
//50440168
//50747730
//51163695
//51170460
//51267056
//51579660
//52439321
//54574608
//55361160
//55822320
//56268720
//56745189
//57206532
//57675438
//60897276
//61404552
//61895592
//63050210
//64083820
//67663640
//68218260
//68227280
//68772880
//69355231
//70492202
//71508165
//74419920
//75660252
//76121595
//76275376
//76755690
//76900584
//77369490
//81196368
//81861912
//85809798
//90957680
//94575315
//95344220
//96125730
//100880336
//101495460
//102327390
//102340920
//103159320
//104878642
//105738303
//110722320
//113490378
//114413064
//115350876
//121794552
//122809104
//123791184
//126100420
//128167640
//135327280
//136436520
//138710462
//140984404
//143016330
//144188595
//151320504
//152243190
//153511380
//153801168
//154738980
//157317963
//163723824
//171619596
//176230505
//189150630
//190688440
//192251460
//195455651
//202990920
//204654780
//204681840
//206318640
//208065693
//209757284
//211476606
//214524495
//226980756
//228826128
//230701752
//243589104
//252200840
//256335280
//262196605
//272873040
//277420924
//281968808
//283725945
//286032660
//288377190
//302641008
//304486380
//307022760
//309477960
//314635926
//317214909
//343239192
//346776155
//352461010
//378301260
//381376880
//384502920
//390911302
//405981840
//409309560
//416131386
//419514568
//422953212
//429048990
//453961512
//461403504
//471953889
//504401680
//524393210
//528691515
//554841848
//563937616
//567451890
//572065320
//576754380
//586366953
//608972760
//614045520
//618955920
//624197079
//629271852
//634429818
//686478384
//693552310
//704922020
//756602520
//769005840
//781822604
//786589815
//818619120
//832262772
//839029136
//845906424
//858097980
//907923024
//943907778
//977278255
//757 values of n
//sum = 44511058204
